diff --git a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
index b197306..50e0926 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
@@ -2,4 +2,4 @@ export { SwapRouter } from './swapRouter';
 export * from './entities';
 export * from './utils/routerTradeAdapter';
 export { RoutePlanner, CommandType } from './utils/routerCommands';
-export { UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, WETH_ADDRESS, } from './utils/constants';
+export { UNIVERSAL_ROUTER_CREATION_BLOCK, UNIVERSAL_ROUTER_ADDRESS, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, WETH_ADDRESS, UniversalRouterVersion, } from './utils/constants';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
index 9a7066b..ae10e48 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
@@ -210,88 +210,291 @@ function createCommand(type, parameters) {
   };
 }
 
-var _CHAIN_CONFIGS;
+var _routerConfigs, _routerConfigs2, _routerConfigs3, _routerConfigs4, _routerConfigs5, _routerConfigs6, _routerConfigs7, _routerConfigs8, _routerConfigs9, _routerConfigs10, _routerConfigs11, _routerConfigs12, _routerConfigs13, _routerConfigs14, _routerConfigs15, _routerConfigs16, _routerConfigs17, _routerConfigs18, _routerConfigs19, _routerConfigs20, _routerConfigs21, _routerConfigs22, _routerConfigs23, _routerConfigs24, _routerConfigs25, _routerConfigs26, _routerConfigs27, _routerConfigs28, _routerConfigs29, _routerConfigs30, _CHAIN_CONFIGS;
+(function (UniversalRouterVersion) {
+  UniversalRouterVersion["V1_2"] = "1.2";
+  UniversalRouterVersion["V2_0"] = "2.0";
+})(exports.UniversalRouterVersion || (exports.UniversalRouterVersion = {}));
 var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
+// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4
 var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
-  creationBlock: 17143817
+  routerConfigs: (_routerConfigs = {}, _routerConfigs[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17143817
+  }, _routerConfigs[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17143817
+  }, _routerConfigs)
 }, _CHAIN_CONFIGS[5] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
-  creationBlock: 8940568
+  routerConfigs: (_routerConfigs2 = {}, _routerConfigs2[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8940568
+  }, _routerConfigs2[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8940568
+  }, _routerConfigs2)
 }, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
-  creationBlock: 3543575
+  routerConfigs: (_routerConfigs3 = {}, _routerConfigs3[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 3543575
+  }, _routerConfigs3[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 3543575
+  }, _routerConfigs3)
 }, _CHAIN_CONFIGS[137] = {
-  router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 52210153
+  routerConfigs: (_routerConfigs4 = {}, _routerConfigs4[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
+    creationBlock: 52210153
+  }, _routerConfigs4[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
+    creationBlock: 52210153
+  }, _routerConfigs4)
 }, _CHAIN_CONFIGS[80001] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
-  creationBlock: 35176052
+  routerConfigs: (_routerConfigs5 = {}, _routerConfigs5[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 35176052
+  }, _routerConfigs5[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 35176052
+  }, _routerConfigs5)
 }, _CHAIN_CONFIGS[10] = {
-  router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 114702266
+  routerConfigs: (_routerConfigs6 = {}, _routerConfigs6[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
+    creationBlock: 114702266
+  }, _routerConfigs6[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
+    creationBlock: 114702266
+  }, _routerConfigs6)
 }, _CHAIN_CONFIGS[420] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 8887728
+  routerConfigs: (_routerConfigs7 = {}, _routerConfigs7[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8887728
+  }, _routerConfigs7[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8887728
+  }, _routerConfigs7)
 }, _CHAIN_CONFIGS[42161] = {
-  router: '0x5E325eDA8064b456f4781070C0738d849c824258',
   weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 169472836
+  routerConfigs: (_routerConfigs8 = {}, _routerConfigs8[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x5E325eDA8064b456f4781070C0738d849c824258',
+    creationBlock: 169472836
+  }, _routerConfigs8[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x5E325eDA8064b456f4781070C0738d849c824258',
+    creationBlock: 169472836
+  }, _routerConfigs8)
 }, _CHAIN_CONFIGS[421613] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
-  creationBlock: 18815277
+  routerConfigs: (_routerConfigs9 = {}, _routerConfigs9[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 18815277
+  }, _routerConfigs9[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 18815277
+  }, _routerConfigs9)
 }, _CHAIN_CONFIGS[42220] = {
-  router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
   weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 21407637
+  routerConfigs: (_routerConfigs10 = {}, _routerConfigs10[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
+    creationBlock: 66790
+  }, _routerConfigs10[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
+    creationBlock: 66790
+  }, _routerConfigs10)
 }, _CHAIN_CONFIGS[44787] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 17566658
+  routerConfigs: (_routerConfigs11 = {}, _routerConfigs11[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17566658
+  }, _routerConfigs11[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17566658
+  }, _routerConfigs11)
 }, _CHAIN_CONFIGS[56] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
   weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 35160263
+  routerConfigs: (_routerConfigs12 = {}, _routerConfigs12[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 35160263
+  }, _routerConfigs12[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 35160263
+  }, _routerConfigs12)
 }, _CHAIN_CONFIGS[43114] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
   weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 40237257
+  routerConfigs: (_routerConfigs13 = {}, _routerConfigs13[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 40237257
+  }, _routerConfigs13[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 40237257
+  }, _routerConfigs13)
 }, _CHAIN_CONFIGS[84531] = {
-  router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 6915289
+  routerConfigs: (_routerConfigs14 = {}, _routerConfigs14[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
+    creationBlock: 6915289
+  }, _routerConfigs14[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
+    creationBlock: 6915289
+  }, _routerConfigs14)
 }, _CHAIN_CONFIGS[8453] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 9107268
+  routerConfigs: (_routerConfigs15 = {}, _routerConfigs15[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 9107268
+  }, _routerConfigs15[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 9107268
+  }, _routerConfigs15)
 }, _CHAIN_CONFIGS[81457] = {
-  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
   weth: '0x4300000000000000000000000000000000000004',
-  creationBlock: 1116444
+  routerConfigs: (_routerConfigs16 = {}, _routerConfigs16[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
+    creationBlock: 1116444
+  }, _routerConfigs16[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
+    creationBlock: 1116444
+  }, _routerConfigs16)
 }, _CHAIN_CONFIGS[7777777] = {
-  router: '0x2986d9721A49838ab4297b695858aF7F17f38014',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 11832155
+  routerConfigs: (_routerConfigs17 = {}, _routerConfigs17[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+    creationBlock: 11832155
+  }, _routerConfigs17[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+    creationBlock: 11832155
+  }, _routerConfigs17)
 }, _CHAIN_CONFIGS[324] = {
-  router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
   weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',
-  creationBlock: 12640979
+  routerConfigs: (_routerConfigs18 = {}, _routerConfigs18[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
+    creationBlock: 12640979
+  }, _routerConfigs18[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
+    creationBlock: 12640979
+  }, _routerConfigs18)
+}, _CHAIN_CONFIGS[11124] = {
+  weth: '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d',
+  routerConfigs: (_routerConfigs19 = {}, _routerConfigs19[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',
+    creationBlock: 2616204
+  }, _routerConfigs19[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',
+    creationBlock: 2616204
+  }, _routerConfigs19)
+}, _CHAIN_CONFIGS[543210] = {
+  weth: '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c',
+  routerConfigs: (_routerConfigs20 = {}, _routerConfigs20[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',
+    creationBlock: 12528
+  }, _routerConfigs20[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',
+    creationBlock: 12528
+  }, _routerConfigs20)
+}, _CHAIN_CONFIGS[60808] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs21 = {}, _routerConfigs21[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',
+    creationBlock: 5369968
+  }, _routerConfigs21[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',
+    creationBlock: 5369968
+  }, _routerConfigs21)
+}, _CHAIN_CONFIGS[7560] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs22 = {}, _routerConfigs22[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',
+    creationBlock: 9622699
+  }, _routerConfigs22[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',
+    creationBlock: 9622699
+  }, _routerConfigs22)
+}, _CHAIN_CONFIGS[360] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs23 = {}, _routerConfigs23[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',
+    creationBlock: 6177818
+  }, _routerConfigs23[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',
+    creationBlock: 6177818
+  }, _routerConfigs23)
+}, _CHAIN_CONFIGS[57073] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs24 = {}, _routerConfigs24[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',
+    creationBlock: 525058
+  }, _routerConfigs24[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',
+    creationBlock: 525058
+  }, _routerConfigs24)
+}, _CHAIN_CONFIGS[17069] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs25 = {}, _routerConfigs25[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',
+    creationBlock: 598982
+  }, _routerConfigs25[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',
+    creationBlock: 598982
+  }, _routerConfigs25)
+}, _CHAIN_CONFIGS[690] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs26 = {}, _routerConfigs26[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',
+    creationBlock: 929085
+  }, _routerConfigs26[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',
+    creationBlock: 929085
+  }, _routerConfigs26)
+}, _CHAIN_CONFIGS[2741] = {
+  weth: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',
+  routerConfigs: (_routerConfigs27 = {}, _routerConfigs27[exports.UniversalRouterVersion.V1_2] = {
+    address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',
+    creationBlock: 66790
+  }, _routerConfigs27[exports.UniversalRouterVersion.V2_0] = {
+    address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',
+    creationBlock: 66790
+  }, _routerConfigs27)
+}, _CHAIN_CONFIGS[69000] = {
+  weth: '0x164906a76f1A2Ea933366c446AE0Ec6a37062c42',
+  routerConfigs: (_routerConfigs28 = {}, _routerConfigs28[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',
+    creationBlock: 48474
+  }, _routerConfigs28[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',
+    creationBlock: 48474
+  }, _routerConfigs28)
+}, _CHAIN_CONFIGS[6900] = {
+  weth: '0x8f3e2785985aa4005c63f97f7cc89ce91a948267',
+  routerConfigs: (_routerConfigs29 = {}, _routerConfigs29[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x62E309AdCF935D62f824081148798eF8A7466b66',
+    creationBlock: 1654941
+  }, _routerConfigs29[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x62E309AdCF935D62f824081148798eF8A7466b66',
+    creationBlock: 1654941
+  }, _routerConfigs29)
+}, _CHAIN_CONFIGS[34443] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs30 = {}, _routerConfigs30[exports.UniversalRouterVersion.V1_2] = {
+    address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',
+    creationBlock: 19224890
+  }, _routerConfigs30[exports.UniversalRouterVersion.V2_0] = {
+    address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',
+    creationBlock: 19224890
+  }, _routerConfigs30)
 }, _CHAIN_CONFIGS);
-var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
+var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(version, chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].router;
+  return CHAIN_CONFIGS[chainId].routerConfigs[version].address;
 };
-var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(chainId) {
+var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(version, chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].creationBlock;
+  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock;
 };
 var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
@@ -414,12 +617,12 @@ function addV2Swap(planner, _ref, tradeType, options, payerIsUser, routerMustCus
   if (tradeType == sdkCore.TradeType.EXACT_INPUT) {
     planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [
     // if native, we have to unwrap so keep in the router for now
-    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
+    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (token) {
+      return token.wrapped.address;
     }), payerIsUser]);
   } else if (tradeType == sdkCore.TradeType.EXACT_OUTPUT) {
-    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
+    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (token) {
+      return token.wrapped.address;
     }), payerIsUser]);
   }
 }
@@ -480,7 +683,7 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
     var newRouteOriginal = new routerSdk.MixedRouteSDK([].concat(section), section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1, outputToken);
     var newRoute = new routerSdk.MixedRoute(newRouteOriginal);
     /// Previous output is now input
-    inputToken = outputToken;
+    inputToken = outputToken.wrapped;
     var mixedRouteIsAllV3 = function mixedRouteIsAllV3(route) {
       return route.pools.every(function (pool) {
         return pool instanceof v3Sdk.Pool;
@@ -493,8 +696,8 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
       // note: because of the partitioning function we can be sure that the next section is v2
       isLastSectionInRoute(i) ? tradeRecipient : sections[i + 1][0].liquidityToken.address, i == 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, path, payerIsUser && i === 0]);
     } else {
-      planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
-        return pool.address;
+      planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (token) {
+        return token.wrapped.address;
       }), payerIsUser && i === 0]);
     }
   }
@@ -10654,6 +10857,8 @@ var RouterTradeAdapter = /*#__PURE__*/function () {
           outputAmount: route.outputAmount
         };
       }),
+      // TODO: ROUTE-219 - Support v4 trade in universal-router sdk
+      v4Routes: [],
       mixedRoutes: typedRoutes.filter(function (route) {
         return route.mixedRoute;
       }).map(function (route) {
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
index 442e461..5c72b9d 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n    },\n  },\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n    },\n  },\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  [11124]: {\n    weth: '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n    },\n  },\n  [543210]: {\n    weth: '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n    },\n  },\n  [60808]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n    },\n  },\n  [7560]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n    },\n  },\n  [360]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n    },\n  },\n  [57073]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n    },\n  },\n  [17069]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n    },\n  },\n  [690]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n    },\n  },\n  [2741]: {\n    weth: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n    },\n  },\n  [69000]: {\n    weth: '0x164906a76f1A2Ea933366c446AE0Ec6a37062c42',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n    },\n  },\n  [6900]: {\n    weth: '0x8f3e2785985aa4005c63f97f7cc89ce91a948267',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n    },\n  },\n  [34443]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | V3Pool | V4Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken.wrapped\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof V3Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      // TODO: ROUTE-219 - Support v4 trade in universal-router sdk\n      v4Routes: [],\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","_routerConfigs24","_routerConfigs25","_routerConfigs26","_routerConfigs27","_routerConfigs28","_routerConfigs29","_routerConfigs30","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","pool","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","Pool","reserve0","reserve1"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICwC5CsB,gBAAiB,0BAAApB,SAAA;EAAAC,cAAA,CAAAmB,gBAAA,EAAApB,SAAA;EAI5B,SAAAoB,iBAAYxT,MAAyB;WACnCoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAACqT,WAAW,EAAEzT,MAAM,CAAC;;EAClC,IAAAkD,MAAA,GAAAsQ,gBAAA,CAAArQ,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,IAAAgE,qBAAA,GAA6E,IAAI,CAACC,eAAe,CAAC,IAAI,CAAC3T,MAAM,CAAC;MAAtG4T,SAAS,GAAAF,qBAAA,CAATE,SAAS;MAAEC,WAAW,GAAAH,qBAAA,CAAXG,WAAW;MAAEC,eAAe,GAAAJ,qBAAA,CAAfI,eAAe;MAAEC,UAAU,GAAAL,qBAAA,CAAVK,UAAU;MAAEC,WAAW,GAAAN,qBAAA,CAAXM,WAAW;IAExE,IAAInC,QAAQ;IACZ,IAAI,IAAI,CAAC7R,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;MAC3B4R,QAAQ,GAAG2B,gBAAgB,CAAC1B,SAAS,CAACC,kBAAkB,CAAC,iBAAiB,EAAE,CAC1E6B,SAAS,CAAC,CAAC,CAAC,EACZC,WAAW,CAAC,CAAC,CAAC,EACdC,eAAe,CAAC,CAAC,CAAC,EAClBE,WAAW,CAAC,CAAC,CAAC,EACdvM,YAAY,CACb,CAAC;KACH,MAAM;MACLoK,QAAQ,GAAG2B,gBAAgB,CAAC1B,SAAS,CAACC,kBAAkB,CAAC,0BAA0B,EAAE,CACnF6B,SAAS,EACTC,WAAW,EACXC,eAAe,EACfE,WAAW,EACXvM,YAAY,EACZ,KAAK,CACN,CAAC;;IAGJmB,OAAO,CAACtF,UAAU,CAAChD,mBAAW,CAACO,aAAa,EAAE,CAACkT,UAAU,EAAElC,QAAQ,CAAC,EAAEnC,MAAM,CAACjM,WAAW,CAAC;GAC1F;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAA9I,SAAA,GAAAC,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAxI,KAAA,CAAAG,KAAA;MACb,IAAMyI,YAAY,GAAGJ,IAAI,CAACyB,QAAQ,CAACC,UAAU;MAC7C,IAAMpB,SAAS,GACbN,IAAI,CAACyB,QAAQ,CAACE,cAAc,IAAIX,gBAAgB,CAACY,YAAY,GAAG/T,iBAAS,CAACkT,MAAM,GAAGlT,iBAAS,CAACgU,OAAO;MACtG,SAAAjD,UAAA,GAAAtH,+BAAA,CAAsB0I,IAAI,CAACyB,QAAQ,CAACK,OAAO,GAAAjD,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GACzC;QAAA,IADSwI,OAAO,GAAApB,MAAA,CAAAlH,KAAA;QAChBwI,QAAQ,CAAC/O,IAAI,CAAC;UACZgP,YAAY,EAAZA,YAAY;UACZH,OAAO,EAAPA,OAAO;UACPK,SAAS,EAATA;SACD,CAAC;;;IAEN,OAAOH,QAAQ;GAChB;EAAAzP,MAAA,CAEDoN,aAAa,GAAb,SAAAA;IACE,IAAI0C,KAAK,GAAG5L,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,SAAA4L,UAAA,GAAAnJ,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAkT,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAU,MAAA,CAAA/I,KAAA;MACb6I,KAAK,GAAGA,KAAK,CAACpC,GAAG,CAAC4B,IAAI,CAACyB,QAAQ,CAACZ,KAAK,CAAC;;IAExC,OAAOL,KAAK;GACb;EAAA9P,MAAA,CAEOyQ,eAAe,GAAf,SAAAA,gBAAgB3T,MAAyB;IAO/C,IAAI4T,SAAS,GAAiB,EAAE;IAChC,IAAIC,WAAW,GAAiB,EAAE;IAClC,IAAIC,eAAe,GAAa,EAAE;IAClC,IAAIC,UAAU,GAAc3M,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7C,IAAI2M,WAAW,GAAiB,EAAE;IAElChU,MAAM,CAAC2Q,OAAO,CAAC,UAAC4D,KAAK;;MACnBV,WAAW,CAACjQ,IAAI,CAAA4Q,QAAA,KAAMD,KAAK,CAACN,QAAQ,CAAE,CAAC;MAEvCH,eAAe,CAAClQ,IAAI,CAAC2Q,KAAK,CAACN,QAAQ,CAACxF,SAAS,CAAC;MAE9CmF,SAAS,CAAChQ,IAAI,CAAC;QACboF,SAAS,EAAEuL,KAAK,CAACE,KAAK;QACtBC,oBAAoB,EAAE;OACvB,CAAC;MAEFX,UAAU,GAAGA,UAAU,CAACnD,GAAG,CAACxJ,gBAAS,CAACC,IAAI,CAACkN,KAAK,CAACN,QAAQ,CAACZ,KAAK,CAAC,CAAC;MAEjEW,WAAW,CAACpQ,IAAI,CAAC;QACf+Q,IAAI,GAAAC,qBAAA,GAAEL,KAAK,CAACN,QAAQ,CAACY,UAAU,YAAAD,qBAAA,GAAI,oEAAoE;QACvGE,KAAK,GAAAC,sBAAA,GAAER,KAAK,CAACN,QAAQ,CAACe,WAAW,YAAAD,sBAAA,GAAI;OACtC,CAAC;KACH,CAAC;IAEF,OAAO;MAAEnB,SAAS,EAATA,SAAS;MAAEC,WAAW,EAAXA,WAAW;MAAEC,eAAe,EAAfA,eAAe;MAAEC,UAAU,EAAVA,UAAU;MAAEC,WAAW,EAAXA;KAAa;GAC5E;EAAA,OAAAR,gBAAA;AAAA,EA1FmC1T,QAAyB;AAC/C0T,0BAAS,gBAAc,IAAIvB,eAAS,CAACC,KAAG,CAAC;AACxCsB,6BAAY,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICzCpByB,UAAW,0BAAA7C,SAAA;EAAAC,cAAA,CAAA4C,UAAA,EAAA7C,SAAA;EAGtB,SAAA6C,WAAYjV,MAAmB;WAC7BoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAACc,KAAK,EAAElB,MAAM,CAAC;;EAC5B,IAAAkD,MAAA,GAAA+R,UAAA,CAAA9R,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,SAAA7F,SAAA,GAAAC,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAvK,KAAA,CAAAG,KAAA;MACd,IAAM0H,QAAQ,GAAGoD,UAAU,CAACnD,SAAS,CAACC,kBAAkB,CAAC,WAAW,EAAE,CACpEwC,KAAK,CAAC3B,YAAY,EAClB2B,KAAK,CAACW,QAAQ,EACdX,KAAK,CAACY,YAAY,EAClBZ,KAAK,CAACvL,SAAS,EACfuL,KAAK,CAACxM,GAAG,EACTwM,KAAK,CAACa,IAAI,CACX,CAAC;MACFxM,OAAO,CAACtF,UAAU,CAAChD,mBAAW,CAACY,KAAK,EAAE,CAACqT,KAAK,CAACpK,KAAK,EAAE0H,QAAQ,CAAC,EAAEnC,MAAM,CAACjM,WAAW,CAAC;;GAErF;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAAvB,UAAA,GAAAtH,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAqR,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GAAE;MAAA,IAArB8D,IAAI,GAAAsD,MAAA,CAAAlH,KAAA;MACb,SAAA8I,UAAA,GAAAnJ,+BAAA,CAAsBiE,IAAI,CAACmH,QAAQ,GAAAhC,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GAAE;QAAA,IAA1BwI,OAAO,GAAAS,MAAA,CAAA/I,KAAA;QAChBwI,QAAQ,CAAC/O,IAAI,CAAC;UACZgP,YAAY,EAAE7E,IAAI,CAAC6E,YAAY;UAC/BH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAEzS,iBAAS,CAACkT;SACtB,CAAC;;;IAIN,OAAOZ,QAAQ;GAChB;EAAAzP,MAAA,CAEDoN,aAAa,GAAb,SAAAA;IACE,IAAI0C,KAAK,GAAG5L,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,SAAAgO,UAAA,GAAAvL,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAsV,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAApL,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAA8C,MAAA,CAAAnL,KAAA;MACb6I,KAAK,GAAGA,KAAK,CAACpC,GAAG,CAAC4B,IAAI,CAACrI,KAAK,CAAC;;IAE/B,OAAO6I,KAAK;GACb;EAAA,OAAAiC,UAAA;AAAA,EA1C6BnV,QAAmB;AACnCmV,oBAAS,gBAAc,IAAIhD,eqD,SAAU,0BAAAnD,SAAA;EAAAC,cAAA,CAAAkD,SAAA,EAAAnD,SAAA;EAGrB,SAAAmD,UAAYvV,MAAkB;WAC5BoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAACQ,IAAI,EAAEZ,MAAM,CAAC;;EAC3B,IAAAkD,MAAA,GAAAqS,SAAA,CAAApS,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,SAAA7F,SAAA,GAAAC,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAvK,KAAA,CAAAG,KAAA;MACd,IAAM0H,QAAQ,GAAG0D,SAAS,CAACzD,SAAS,CAACC,kBAAkB,CAAC,cAAc,EAAE,CACtEwC,KAAK,CAACiB,OAAO,EACbjB,KAAK,CAACW,QAAQ,CAACjV,MAAM,EACrBsU,KAAK,CAACW,QAAQ,EACdX,KAAK,CAACkB,YAAY,EAClBlB,KAAK,CAACvL,SAAS,CAChB,CAAC;MAEFJ,OAAO,CAACtF,UAAU,CAAChD,mBAAW,CAACM,IAAI,EAAE,CAAC2T,KAAK,CAACpK,KAAK,EAAE0H,QAAQ,CAAC,EAAEnC,MAAM,CAACjM,WAAW,CAAC;;GAEpF;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAAvB,UAAA,GAAAtH,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAqR,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAlD,MAAA,CAAAlH,KAAA;MACd,SAAA8I,UAAA,GAAAnJ,+BAAA,CAAsByK,KAAK,CAACW,QAAQ,GAAAhC,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GAAE;QAAA,IAA3BwI,OAAO,GAAAS,MAAA,CAAA/I,KAAA;QAChBwI,QAAQ,CAAC/O,IAAI,CAAC;UACZgP,YAAY,EAAE2B,KAAK,CAAC3B,YAAY;UAChCH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAEzS,iBAAS,CAACkT;SACtB,CAAC;;;IAGN,OAAOZ,QAAQ;GAChB;EAAAzP,MAAA,CAEDoN,aAAa,GAAb,SAAAA;IACE,IAAI0C,KAAK,GAAG5L,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,SAAAgO,UAAA,GAAAvL,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAsV,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAApL,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAA8C,MAAA,CAAAnL,KAAA;MACb6I,KAAK,GAAGA,KAAK,CAACpC,GAAG,CAAC4B,IAAI,CAACrI,KAAK,CAAC;;IAE/B,OAAO6I,KAAK;GACb;EAAA,OAAAuC,SAAA;AAAA,EAzC4BzV,QAAkB;AACjCyV,mBAAS,gBAAc,IAAItD,egD5CwD,YAAa,0BAAAtD,SAAA;EAAAC,cAAA,CAAAqD,YAAA,EAAAtD,SAAA;EAIxB,SAAAsD,aAAY1V,MAAqB;WAC/BoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAACmQ,OAAO,EAAEvQ,MAAM,CAAC;;EAC9B,IAAAkD,MAAA,GAAAwS,YAAA,CAAAvS,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,SAAA7F,SAAA,GAAAC,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAvK,KAAA,CAAAG,KAAA;MACd,IAAIwL,cAAc,GAAoB,EAAE;MACxC,IAAIC,iBAAiB,GAA6BrB,KAAK,CAACsB,KAAK,CAAC7J,GAAG,CAAC,UAAC+D,CAAC,EAAE+F,KAAK;QAAA,OAAK,CAC9E;UAAEC,UAAU,EAAED,KAAK;UAAEE,SAAS,EAAE;SAAG,CACpC;QAAC;MACF,IAAIC,yBAAyB,GAA6B,IAAI,CAACC,4BAA4B,CAAC3B,KAAK,CAACsB,KAAK,CAAC;MAExG,SAAAzE,UAAA,GAAAtH,+BAAA,CAAmByK,KAAK,CAACsB,KAAK,GAAAxE,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GAAE;QAAA,IAArBuI,IAAI,GAAAnB,MAAA,CAAAlH,KAAA;QACb,IAAAgM,qBAAA,GAA0B,IAAI,CAACC,sBAAsB,CAAC5D,IAAI,CAAC;UAAnD6D,aAAa,GAAAF,qBAAA,CAAbE,aAAa;QACrBV,cAAc,CAAC/R,IAAI,CAACyS,aAAa,CAAC;;MAGpC,IAAIxE,QAAgB;MACpB,IAAI8D,cAAc,CAAC1V,MAAM,IAAI,CAAC,EAAE;QAC9B4R,QAAQ,GAAG6D,YAAY,CAAC5D,SAAS,CAACC,kBAAkB,CAAC,sBAAsB,EAAE,CAC3E4D,cAAc,CAAC,CAAC,CAAC,EACjB,EAAE,EACFD,YAAY,CAACY,mBAAmB,EAChC/B,KAAK,CAACvL,SAAS,CAChB,CAAC;OACH,MAAM;QACL6I,QAAQ,GAAG6D,YAAY,CAAC5D,SAAS,CAACC,kBAAkB,CAAC,gCAAgC,EAAE,CACrF4D,cAAc,EACd,EAAE,EACFC,iBAAiB,EACjBK,yBAAyB,EACzBP,YAAY,CAACY,mBAAmB,EAChC/B,KAAK,CAACvL,SAAS,EACf,GAAG,CACJ,CAAC;;MAGJ,IAAI,CAAC,CAACuL,KAAK,CAACgC,oBAAoB,EAAE;QAChC,SAAAtD,UAAA,GAAAnJ,+BAAA,CAAyByK,KAAK,CAACgC,oBAAoB,GAAArD,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GACjD;UAAA,IADSiD,UAAU,GAAAgG,MAAA,CAAA/I,KAAA;UACnB4E,uBAAuB,CAACnG,OAAO,EAAE;YAC/BoG,QAAQ,EAAE9B,UAAU,CAACsJ,gBAAgB,GACjC;cAAEvK,KAAK,EAAEiB,UAAU,CAACjB,KAAK;cAAE5B,QAAQ,EAAEkK,KAAK,CAAClF;aAAiB,GAC5DsC,SAAS;YACb1C,aAAa,EAAE/B,UAAU,CAAC+B,aAAa;YACvCE,mBAAmB,EAAEjC,UAAU,CAACiC,mBAAmB,GAC/C;cAAElD,KAAK,EAAEiB,UAAU,CAACjB,KAAK;cAAEZ,MAAM,EAAE,IAAI,CAACoL,kBAAkB,CAAClC,KAAK,EAAErH,UAAU,CAACjB,KAAK,CAAC,CAAChI,QAAQ;aAAI,GAChG0N;WACL,CAAC;;;MAGN/I,OAAO,CAACtF,UAAU,CAChB,IAAI,CAACoT,UAAU,CAACnC,KAAK,CAAClF,eAAe,CAAC,EACtC,CAAC,IAAI,CAACoH,kBAAkB,CAAClC,KAAK,EAAEhN,WAAW,CAAC,CAACtD,QAAQ,EAAE,EAAE4N,QAAQ,CAAC,EAClEnC,MAAM,CAACjM,WAAW,CACnB;;GAEJ;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAA0C,UAAA,GAAAvL,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAsV,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAApL,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAe,MAAA,CAAAnL,KAAA;MACd,SAAAwM,UAAA,GAAA7M,+BAAA,CAAmByK,KAAK,CAACsB,KAAK,GAAAe,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA1M,IAAA,GAAE;QAAA,IAArBuI,IAAI,GAAAoE,MAAA,CAAAzM,KAAA;QACb,SAAA0M,UAAA,GAAA/M,+BAAA,CAAoB0I,IAAI,CAAChP,UAAU,CAACsT,KAAK,GAAAC,MAAA,IAAAA,MAAA,GAAAF,UAAA,IAAA5M,IAAA,GAAE;UAAA,IAAhC6M,KAAK,GAAAC,MAAA,CAAA5M,KAAA;UACdwI,QAAQ,CAAC/O,IAAI,CAAC;YACZgP,YAAY,EAAEkE,KAAK,CAAC7K,KAAK;YACzBwG,OAAO,EAAEqE,KAAK,CAACE,oBAAoB;YACnClE,SAAS,EAAEzS,iBAAS,CAACkT;WACtB,CAAC;;;;IAIR,OAAOZ,QAAQ;GAChB;EAAAzP,MAAA,CAEDwN,cAAc,GAAd,SAAAA;IACE,IAAIuG,WAAW,GAAG,IAAIxW,GAAG,EAAU;IACnC,SAAAyW,UAAA,GAAApN,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAmX,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAjN,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAA4C,MAAA,CAAAhN,KAAA;MACd,SAAAiN,UAAA,GAAAtN,+BAAA,CAAmByK,KAAK,CAACsB,KAAK,GAAAwB,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnN,IAAA,GAAE;QAAA,IAArBuI,IAAI,GAAA6E,MAAA,CAAAlN,KAAA;QACb,SAAAmN,UAAA,GAAAxN,+BAAA,CAA4B0I,IAAI,CAAChP,UAAU,CAAC+T,aAAa,GAAAC,MAAA,IAAAA,MAAA,GAAAF,UAAA,IAAArN,IAAA,GAAE;UAAA,IAAhDsN,aAAa,GAAAC,MAAA,CAAArN,KAAA;UACtB,IAAM8B,KAAK,GAAGsL,aAAa,CAACtL,KAAK,CAACqD,WAAW,EAAE;UAC/C2H,WAAW,CAACrG,GAAG,CAAC3E,KAAK,CAAC;;;;IAI5B,OAAOgL,WAAW;GACnB;EAAA/T,MAAA,CAEDuT,kBAAkB,GAAlB,SAAAA,mBAAmBlC,KAAkB,EAAEtI;QAAAA;MAAAA,QAAgB1E,WAAW;;IAChE,IAAIkQ,eAAe,GAAGrQ,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IACvC,SAAAqQ,WAAA,GAAA5N,+BAAA,CAAmByK,KAAK,CAACsB,KAAK,GAAA8B,OAAA,IAAAA,OAAA,GAAAD,WAAA,IAAAzN,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAmF,OAAA,CAAAxN,KAAA;MACbsN,eAAe,GAAGA,eAAe,CAAC7G,GAAG,CAAC,IAAI,CAACgH,cAAc,CAACpF,IAAI,CAAChP,UAAU,CAAC+T,aAAa,EAAEtL,KAAK,CAAC,CAAC;;IAElG,OAAOwL,eAAe;GACvB;EAAAvU,MAAA,CAEDoN,aAAa,GAAb,SAAAA,cAAcrE;QAAAA;MAAAA,QAAgB1E,WAAW;;IACvC,IAAI4J,UAAU,GAAG/J,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAClC,SAAAwQ,WAAA,GAAA/N,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAA8X,OAAA,IAAAA,OAAA,GAAAD,WAAA,IAAA5N,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAuD,OAAA,CAAA3N,KAAA;MACd,SAAA4N,WAAA,GAAAjO,+BAAA,CAAmByK,KAAK,CAACsB,KAAK,GAAAmC,OAAA,IAAAA,OAAA,GAAAD,WAAA,IAAA9N,IAAA,GAAE;QAAA,IAArBuI,IAAI,GAAAwF,OAAA,CAAA7N,KAAA;QACbgH,UAAU,GAAGA,UAAU,CAACP,GAAG,CAAC,IAAI,CAACgH,cAAc,CAACpF,IAAI,CAAChP,UAAU,CAAC+T,aAAa,EAAEtL,KAAK,CAAC,CAAC;;;IAG1F,OAAOkF,UAAU;GAClB;EAAAjO,MAAA,CAEOwT,UAAU,GAAV,SAAAA,WAAWrH,eAAuB;IACxC,QAAQA,eAAe,CAACC,WAAW,EAAE;MACnC,KAAK,4CAA4C;;QAC/C,OAAOhP,mBAAW,CAACI,YAAY;MACjC,KAAK,4CAA4C;;QAC/C,OAAOJ,mBAAW,CAACK,YAAY;MACjC;QACE,MAAM,IAAIoD,KAAK,CAAC,6BAA6B,CAAC;;GAEnD;EAAAb,MAAA,CAEOgT,4BAA4B,GAA5B,SAAAA,6BAA6B+B,aAAsB;IACzD,IAAIC,yBAAyB,GAA6B,EAAE;IAC5D,IAAMC,uBAAuB,GAAa,EAAE;IAE5C,KAAK,IAAMnL,CAAC,IAAIiL,aAAa,EAAE;MAC7B,IAAMG,YAAY,GAAGH,aAAa,CAACjL,CAAC,CAAC;MAAA,IAAAqL,KAAA,YAAAA,QAEkB;QACrD,IAAM7F,IAAI,GAAG4F,YAAY,CAAC5U,UAAU,CAAC+T,aAAa,CAACe,CAAC,CAAC;QAErD,IAAIH,uBAAuB,CAACI,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKhG,IAAI,CAACxJ,SAAS;UAAC,KAAK,CAAC,CAAC,EAAE;UACzEmP,uBAAuB,CAACvU,IAAI,CAAC4O,IAAI,CAACxJ,SAAS,CAAC;;QAG9C,IAAMyP,cAAc,GAAGN,uBAAuB,CAACI,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKhG,IAAI,CAACxJ,SAAS;UAAC;QAErF,IAAI,CAACkP,yBAAyB,CAACO,cAAc,CAAC,EAAE;UAC9CP,yBAAyB,CAACtU,IAAI,CAAC,CAC7B;YACEmS,UAAU,EAAE/I,CAAC;YACbgJ,SAAS,EAAEsC;WACZ,CACF,CAAC;SACH,MAAM;UACLJ,yBAAyB,CAACO,cAAc,CAAC,CAAC7U,IAAI,CAAC;YAC7CmS,UAAU,EAAE/I,CAAC;YACbgJ,SAAS,EAAEsC;WACZ,CAAC;;OAEL;MAtBD,KAAK,IAAMA,CAAC,IAAIF,YAAY,CAAC5U,UAAU,CAAC+T,aAAa;QAAAc,KAAA;;;IAwBvD,OAAOH,yBAAyB;GACjC;EAAAhV,MAAA,CAEOkT,sBAAsB,GAAtB,SAAAA,uBAAuBsC,IAAW;IACxC,IAAMrC,aAAa,GAAG;MACpB7S,UAAU,EAAEkV,IAAI,CAAClV,UAAU;MAC3BmV,SAAS,EAAEvR,gBAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAC9BuR,WAAW,EAAExR,gBAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAChCoH,SAAS,EAAEiK,IAAI,CAACjK,SAAS;MACzBoK,SAAS,EAAE;KACZ;IACD,OAAO;MAAExC,aAAa,EAAbA;KAAe;GACzB;EAAAnT,MAAA,CAEO0U,cAAc,GAAd,SAAAA,eAAekB,cAAmC,EAAE7M,KAAa;IACvE,OAAO6M,cAAc,CAACC,MAAM,CAC1B,UAACC,GAAc,EAAEzB,aAAgC;MAAA,OAC/CA,aAAa,CAACtL,KAAK,CAACqD,WAAW,EAAE,IAAIrD,KAAK,CAACqD,WAAW,EAAE,GAAG0J,GAAG,CAACpI,GAAG,CAAC2G,aAAa,CAAC0B,WAAW,CAAC,GAAGD,GAAG;OACrG5R,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAClB;GACF;EAAA,OAAAqO,YAAA;AAAA,EA3K+B5V,QAAqB;AACvC4V,sBAAS,gBAAc,IAAIzD,eAAS,CAACC,KAAG,CAAC;AACzCwD,gCAAmB,GAAW,oEAAorGwD,aAAc,0BAAA9G,SAAA;EAAAC,cAAA,CAAA6G,aAAA,EAAA9G,SAAA;EAGzB,SAAA8G,cAAYlZ,MAAsB;WAChCoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAAC+Y,QAAQ,EAAEnZ,MAAM,CAAC;;EAC/B,IAAAkD,MAAA,GAAAgW,aAAA,CAAA/V,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,SAAA7F,SAAA,GAAAC,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAvK,KAAA,CAAAG,KAAA;MACd,IAAM0H,QAAQ,GAAGqH,aAAa,CAACpH,SAAS,CAACC,kBAAkB,CAAC,8BAA8B,EAAE,CAC1FwC,KAAK,CAACxK,KAAK,CAACiC,GAAG,CAAC,UAAC9B,IAAI;QACnB,OAAO;UAAEkP,QAAQ,EAAElP,IAAI,CAACkP,QAAQ;UAAEC,OAAO,EAAEnP,IAAI,CAACmP;SAAS;OAC1D,CAAC,EACF9E,KAAK,CAAC+E,YAAY,EAClB/E,KAAK,CAACgF,YAAY,EAClBhF,KAAK,CAAC9C,QAAQ,CACf,CAAC;MACF,IAAMtH,KAAK,GAAGoK,KAAK,CAACxK,KAAK,CAACgP,MAAM,CAAC,UAACS,OAAO,EAAEtP,IAAI;QAC7C,OAAOsP,OAAO,CAAC5I,GAAG,CAAC1G,IAAI,CAACmP,OAAO,CAAC;OACjC,EAAEjS,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACrBuB,OAAO,CAACtF,UAAU,CAAChD,mBAAW,CAACW,QAAQ,EAAE,CAACkJ,KAAK,EAAE0H,QAAQ,CAAC,EAAEnC,MAAM,CAACjM,WAAW,CAAC;;GAElF;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAAvB,UAAA,GAAAtH,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAAqR,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAlD,MAAA,CAAAlH,KAAA;MACd,SAAA8I,UAAA,GAAAnJ,+BAAA,CAAmByK,KAAK,CAACxK,KAAK,GAAAmJ,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GAAE;QAAA,IAArBC,IAAI,GAAAgJ,MAAA,CAAA/I,KAAA;QACb,SAAAkL,UAAA,GAAAvL,+BAAA,CAAsBI,IAAI,CAACkP,QAAQ,CAACK,MAAM,GAAAnE,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAApL,IAAA,GAAE;UAAA,IAAjCwI,OAAO,GAAA6C,MAAA,CAAAnL,KAAA;UAChBwI,QAAQ,CAAC/O,IAAI,CAAC;YACZgP,YAAY,EAAE1I,IAAI,CAAC0I,YAAY;YAC/BH,OAAO,EAAPA,OAAO;YACPK,SAAS,EAAEzS,iBAAS,CAACkT;WACtB,CAAC;;;;IAIR,OAAOZ,QAAQ;GAChB;EAAAzP,MAAA,CAEDoN,aAAa,GAAb,SAAAA;IACE,IAAI0C,KAAK,GAAG5L,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,SAAAsP,UAAA,GAAA7M,+BAAA,CAAoB,IAAI,CAAC9J,MAAM,GAAA4W,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAA1M,IAAA,GAAE;MAAA,IAAtBsK,KAAK,GAAAqC,MAAA,CAAAzM,KAAA;MACd,SAAA0M,UAAA,GAAA/M,+BAAA,CAAmByK,KAAK,CAACxK,KAAK,GAAAgN,MAAA,IAAAA,MAAA,GAAAF,UAAA,IAAA5M,IAAA,GAAE;QAAA,IAArBC,IAAI,GAAA6M,MAAA,CAAA5M,KAAA;QACb6I,KAAK,GAAGA,KAAK,CAACpC,GAAG,CAAC1G,IAAI,CAACmP,OAAO,CAAC;;;IAGnC,OAAOrG,KAAK;GACb;EAAA,OAAAkG,aAAA;AAAA,EAhDgCpZ,QAAsB;AACzCoZ,uBAAS,gBAAc,IAAIjH,ewH,SAAU,0BAAAtH,SAAA;EAAAC,cAAA,CAAAqH,SAAA,EAAAtH,SAAA;EAGrB,SAAAsH,UAAY1Z,MAAkB;WAC5BoS,SAAA,CAAAE,IAAA,OAAMlS,cAAM,CAACuZ,IAAI,EAAE3Z,MAAM,CAAC;;EAC3B,IAAAkD,MAAA,GAAAwW,SAAA,CAAAvW,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAE8G,MAAmB;IAC/C,SAAA7F,SAAA,GAAAC,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAgK,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAxI,KAAA,CAAAG,KAAA;MACb,IAAMyP,gBAAgB,GAAGF,SAAS,CAAC5H,SAAS,CAAC+H,UAAU,CAACH,SAAS,CAAC5H,SAAS,CAACgI,WAAW,CAAC,KAAK,CAAC,CAAC;MAC/F,IAAMjI,QAAQ,GAAG+H,gBAAgB,GAAGpH,IAAI,CAACuH,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MAE7D,IAAIxH,IAAI,CAACM,SAAS,IAAIzS,iBAAS,CAACkT,MAAM,EAAE;QACtC3K,OAAO,CAACtF,UAAU,CAChBhD,mBAAW,CAACQ,QAAQ,EACpB,CAAC0R,IAAI,CAACa,KAAK,EAAExB,QAAQ,EAAEW,IAAI,CAACxJ,SAAS,EAAEwJ,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,CAAC,EACvE/C,MAAM,CAACjM,WAAW,CACnB;OACF,MAAM,IAAI+O,IAAI,CAACM,SAAS,IAAIzS,iBAAS,CAACgU,OAAO,EAAE;QAC9CzL,OAAO,CAACtF,UAAU,CAChBhD,mBAAW,CAACS,SAAS,EACrB,CAACyR,IAAI,CAACa,KAAK,EAAExB,QAAQ,EAAEW,IAAI,CAACxJ,SAAS,EAAEwJ,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,EAAED,IAAI,CAACyH,WAAW,CAAC,EACzFvK,MAAM,CAACjM,WAAW,CACnB;;;GAGN;EAAAP,MAAA,CAEDwP,WAAW,GAAX,SAAAA;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,SAAAvB,UAAA,GAAAtH,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAqR,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAnH,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAnB,MAAA,CAAAlH,KAAA;MACbwI,QAAQ,CAAC/O,IAAI,CAAC;QACZgP,YAAY,EAAEJ,IAAI,CAACI,YAAY;QAC/BH,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAEN,IAAI,CAACM;OACjB,CAAC;;IAEJ,OAAOH,QAAQ;GAChB;EAAAzP,MAAA,CAEDoN,aAAa,GAAb,SAAAA;IACE,IAAI0C,KAAK,GAAG5L,gBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,SAAA4L,UAAA,GAAAnJ,+BAAA,CAAmB,IAAI,CAAC9J,MAAM,GAAAkT,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAhJ,IAAA,GAAE;MAAA,IAArBuI,IAAI,GAAAU,MAAA,CAAA/I,KAAA;MACb6I,KAAK,GAAGA,KAAK,CAACpC,GAAG,CAAC4B,IAAI,CAACa,KAAK,CAAC;;IAE/B,OAAOL,KAAK;GACb;EAAA,OAAA0G,SAAA;AAAA,EA9C4B5Z,QAAkB;AACjC4Z,mBAAS,gBAAc,IAAIzH,eAAS,CAACC,KAAG,CAAC;;ICpB5ClB,UAAU;EAMrB,SAAAA,WAAY3F,MAAoB,EAAEtE,OAAe,EAAEyH,OAAuB;IALjE,cAAS,GAAoB3O,uBAAe,CAACmR,UAAU;IAM9D,IAAI,CAACkJ,WAAW,GAAGjT,YAAY,CAACF,OAAO,CAAC;IACxC,IAAI,CAACsE,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAAC,CAACmD,OAAO,EAAE;MACb,EACEA,OAAO,CAACU,OAAO,CAACjD,KAAK,CAACqD,WAAW,EAAE,KAAK,IAAI,CAAC4K,WAAW,CAAC5K,WAAW,EAAE,IAAApP,CADxEC,SAAS,8CAE6B,IAAI,CAAC+Z,WAAW;MAEtD,EAAU1L,OAAO,CAACU,OAAO,CAAC7D,MAAM,IAAIA,MAAM,IAAAnL,CAA1CC,SAAS;MACT,IAAI,CAACga,WAAW,GAAG3L,OAAO;;;EAE7B,IAAAtL,MAAA,GAAA8N,UAAA,CAAA7N,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,OAAOwE,OAAqB,EAAEmH,CAAc;IAC1ChB,uBAAuB,CAACnG,OAAO,EAAE;MAC/BqG,aAAa,EAAE,IAAI,CAACkL,WAAW;MAC/BhL,mBAAmB,EAAE;QACnBlD,KAAK,EAAE,IAAI,CAACiO,WAAW;QACvB7O,MAAM,EAAE,IAAI,CAACA,MAAM,CAACpH,QAAQ;;KAE/B,CAAC;IACF2E,OAAO,CAACtF,UAAU,CAAChD,mBAAW,CAAC+B,WAAW,EAAE,CAACsF,mBAAmB,EAAE,IAAI,CAAC0D,MAAM,CAAC,CAAC;GAChF;EAAA,OAAA2F,UAAA;AAAA;;ACnBH,WAAYoJ,QAAQ;EAClBA,8BAAkB;EAClBA,8BAAkB;AACpB,CAAC,EAHWA,gBAAQ,KAARA,gBAAQ;AAkDpB,IAAaC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIxV,OAAe;EAAA,OAC9CA,OAAO,CAACyK,WAAW,EAAE,KAAK/H,WAAW,CAAC+H,WAAW,EAAE,IAAIzK,OAAO,CAACyK,WAAW,EAAE,KAAK9H,aAAa,CAAC8H,WAAW,EAAE;AAAA;AAE9G;AACA;AACA,IAAagL,kBAAkB;EAAA,SAAAA;;EAC7BA,kBAAA,CACOC,gBAAgB,GAAvB,SAAAA,iBAAwBC,KAA0B;IAChD,IAAQpQ,KAAK,GAAwBoQ,KAAK,CAAlCpQ,KAAK;MAAEqQ,OAAO,GAAeD,KAAK,CAA3BC,OAAO;MAAEC,QAAQ,GAAKF,KAAK,CAAlBE,QAAQ;IAEhC,IAAI,CAACtQ,KAAK,EAAE,MAAM,IAAIrG,KAAK,CAAC,8BAA8B,CAAC;IAC3D,IAAI,CAACqG,KAAK,CAACnK,MAAM,EAAE,MAAM,IAAI8D,KAAK,CAAC,yCAAyC,CAAC;IAC7E,IAAIqG,KAAK,CAACuQ,IAAI,CAAC,UAACC,CAAC;MAAA,OAAK,CAACA,CAAC,CAAC3a,MAAM;MAAC,EAAE,MAAM,IAAI8D,KAAK,CAAC,+CAA+C,CAAC;IAClG,IAAM8W,UAAU,GAAGzQ,KAAK,CAAC,CAAC,CAAC;IAE3B,IAAM0Q,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACJ,OAAO;IACzC,IAAMM,YAAY,GAAGF,UAAU,CAACA,UAAU,CAAC5a,MAAM,GAAG,CAAC,CAAC,CAACya,QAAQ;IAE/D,IAAI,CAACI,WAAW,IAAI,CAACC,YAAY,EAAE,MAAM,IAAIhX,KAAK,CAAC,kDAAkD,CAAC;IACtG,IAAI+W,WAAW,CAAC/T,OAAO,KAAKgU,YAAY,CAAChU,OAAO,EAC9C,MAAM,IAAIhD,KAAK,CAAC,uDAAuD,CAAC;IAE1E,IAAMiX,gBAAgB,GAAGV,kBAAkB,CAACW,UAAU,CAACZ,gBAAgB,CAACI,OAAO,CAAC,EAAEK,WAAW,CAAC;IAC9F,IAAMI,iBAAiB,GAAGZ,kBAAkB,CAACW,UAAU,CAACZ,gBAAgB,CAACK,QAAQ,CAAC,EAAEK,YAAY,CAAC;IAEjG,IAAMI,WAAW,GAAkB/Q,KAAK,CAAC4B,GAAG,CAAC,UAACoP,QAAQ;MACpD,IAAMC,WAAW,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAACzO,QAAQ;MACxC,IAAM2O,YAAY,GAAGF,QAAQ,CAACA,QAAQ,CAACnb,MAAM,GAAG,CAAC,CAAC,CAAC2M,SAAS;MAE5D,IAAI,CAACyO,WAAW,IAAI,CAACC,YAAY,EAAE;QACjC,MAAM,IAAIvX,KAAK,CAAC,4DAA4D,CAAC;;MAG/E,IAAM6H,WAAW,GAAG2P,sBAAc,CAACC,aAAa,CAACR,gBAAgB,EAAEK,WAAW,CAAC;MAC/E,IAAM7R,YAAY,GAAG+R,sBAAc,CAACC,aAAa,CAACN,iBAAiB,EAAEI,YAAY,CAAC;MAElF,IAAMG,QAAQ,GAAGnB,kBAAkB,CAACoB,gBAAgB,CAAgBtB,gBAAQ,CAACuB,MAAM,EAAEP,QAAQ,CAAC;MAC9F,IAAMQ,QAAQ,GAAGtB,kBAAkB,CAACoB,gBAAgB,CAAgBtB,gBAAQ,CAAC5N,MAAM,EAAE4O,QAAQ,CAAC;MAE9F,OAAO;QACLS,OAAO,EAAED,QAAQ,GACb,IAAIE,WAAO,CACRV,QAA4B,CAACpP,GAAG,CAACsO,kBAAkB,CAACyB,MAAM,CAAC,EAC5Df,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRc,OAAO,EAAEP,QAAQ,GACb,IAAIQ,WAAO,CACRb,QAA4B,CAACpP,GAAG,CAACsO,kBAAkB,CAAC4B,MAAM,CAAC,EAC5DlB,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRiB,UAAU,EACR,CAACP,QAAQ,IAAI,CAACH,QAAQ,GAClB,IAAIlO,uBAAa,CAAC6N,QAAQ,CAACpP,GAAG,CAACsO,kBAAkB,CAAC8B,YAAY,CAAC,EAAEpB,gBAAgB,EAAEE,iBAAiB,CAAC,GACrG,IAAI;QACVtP,WAAW,EAAXA,WAAW;QACXpC,YAAY,EAAZA;OACD;KACF,CAAC;IAEF,OAAO,IAAI6S,eAAW,CAAC;MACrBC,QAAQ,EAAEnB,WAAW,CAClBrL,MAAM,CAAC,UAAC1F,KAAK;QAAA,OAAKA,KAAK,CAAC4R,OAAO;QAAC,CAChChQ,GAAG,CAAC,UAAC5B,KAAK;QAAA,OAAM;UACf4R,OAAO,EAAE5R,KAAK,CAAC4R,OAAsC;UACrDpQ,WAAW,EAAExB,KAAK,CAACwB,WAAW;UAC9BpC,YAAY,EAAEY,KAAK,CAACZ;SACrB;OAAC,CAAC;MACL+S,QAAQ,EAAEpB,WAAW,CAClBrL,MAAM,CAAC,UAAC1F,KAAK;QAAA,OAAKA,KAAK,CAACyR,OAAO;QAAC,CAChC7P,GAAG,CAAC,UAAC5B,KAAK;QAAA,OAAM;UACfyR,OAAO,EAAEzR,KAAK,CAACyR,OAAsC;UACrDjQ,WAAW,EAAExB,KAAK,CAACwB,WAAW;UAC9BpC,YAAY,EAAEY,KAAK,CAACZ;SACrB;OAAC,CAAC;;MAELgT,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAEtB,WAAW,CACrBrL,MAAM,CAAC,UAAC1F,KAAK;QAAA,OAAKA,KAAK,CAAC+R,UAAU;QAAC,CACnCnQ,GAAG,CAAC,UAAC5B,KAAK;QAAA,OAAM;UACf+R,UAAU,EAAE/R,KAAK,CAAC+R,UAA+C;UACjEvQ,WAAW,EAAExB,KAAK,CAACwB,WAAW;UAC9BpC,YAAY,EAAEY,KAAK,CAACZ;SACrB;OAAC,CAAC;MACLL,SAAS,EAAEqR,KAAK,CAACrR;KAClB,CAAC;GACH;EAAAmR,kBAAA,CAEcW,UAAU,GAAjB,SAAAA,WAAkBvR,QAAiB,EAAEuC,KAAmB;IAC9D,IAAIvC,QAAQ,EAAE;MACZ,OAAOgT,aAAK,CAACC,OAAO,CAAC1Q,KAAK,CAAClF,OAAO,CAAC;;IAErC,OAAO,IAAI,CAAC6V,OAAO,CAAC3Q,KAAK,CAAC;GAC3B;EAAAqO,kBAAA,CAMcsC,OAAO,GAAd,SAAAA,QAAe3Q,KAAmB;IACxC,IAAQlF,OAAO,GAAuDkF,KAAK,CAAnElF,OAAO;MAAElC,OAAO,GAA8CoH,KAAK,CAA1DpH,OAAO;MAAEgY,QAAQ,GAAoC5Q,KAAK,CAAjD4Q,QAAQ;MAAEC,MAAM,GAA4B7Q,KAAK,CAAvC6Q,MAAM;MAAEC,SAAS,GAAiB9Q,KAAK,CAA/B8Q,SAAS;MAAEC,UAAU,GAAK/Q,KAAK,CAApB+Q,UAAU;IACjE,OAAO,IAAIC,aAAK,CACdlW,OAAO,EACPlC,OAAO,EACPqY,QAAQ,CAACL,QAAQ,CAAC5Y,QAAQ,EAAE,CAAC,EAC7B6Y,MAAM,YACKnL,SAAS,EACpB,KAAK,EACLoL,SAAS,GAAG3V,gBAAS,CAACC,IAAI,CAAC0V,SAAS,CAAC,GAAGpL,SAAS,EACjDqL,UAAU,GAAG5V,gBAAS,CAACC,IAAI,CAAC2V,UAAU,CAAC,GAAGrL,SAAS,CACpD;GACF;EAAA2I,kBAAA,CAEcyB,MAAM,GAAb,SAAAA,OAAAlQ,IAAA;QAAgB9D,GAAG,GAAA8D,IAAA,CAAH9D,GAAG;MAAEoV,YAAY,GAAAtR,IAAA,CAAZsR,YAAY;MAAEC,SAAS,GAAAvR,IAAA,CAATuR,SAAS;MAAEC,WAAW,GAAAxR,IAAA,CAAXwR,WAAW;MAAE5C,OAAO,GAAA5O,IAAA,CAAP4O,OAAO;MAAEC,QAAQ,GAAA7O,IAAA,CAAR6O,QAAQ;IAClF,OAAO,IAAI4C,UAAI,CACbhD,kBAAkB,CAACsC,OAAO,CAACnC,OAAO,CAAC,EACnCH,kBAAkB,CAACsC,OAAO,CAAClC,QAAQ,CAAC,EACpCwC,QAAQ,CAACnV,GAAG,CAAc,EAC1BoV,YAAY,EACZC,SAAS,EACTF,QAAQ,CAACG,WAAW,CAAC,CACtB;GACF;EAAA/C,kBAAA,CAScoB,gBAAgB,GAAvB,SAAAA,iBACNnY,IAAc,EACd6G,KAAwC;IAExC,OAAOA,KAAK,CAAC0D,KAAK,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACxK,IAAI,KAAKA,IAAI;MAAC;GACjD;EAAA,OAAA+W,kBAAA;AAAA;AAzCcA,+BAAY,GAAG,UAACvM,IAAmC;EAChE,OAAOA,IAAI,CAACxK,IAAI,KAAK6W,gBAAQ,CAAC5N,MAAM,GAAG8N,kBAAkB,CAACyB,MAAM,CAAChO,IAAI,CAAC,GAAGuM,kBAAkB,CAAC4B,MAAM,CAACnO,IAAI,CAAC;AAC1G,CAAC;AA2BcuM,yBAAM,GAAG,UAAApO,KAAA;MAAGqR,QAAQ,GAAArR,KAAA,CAARqR,QAAQ;IAAEC,QAAQ,GAAAtR,KAAA,CAARsR,QAAQ;EAC3C,OAAO,IAAI/Q,UAAI,CACb8O,sBAAc,CAACC,aAAa,CAAClB,kBAAkB,CAACsC,OAAO,CAACW,QAAQ,CAACtR,KAAK,CAAC,EAAEsR,QAAQ,CAACrV,QAAQ,CAAC,EAC3FqT,sBAAc,CAACC,aAAa,CAAClB,kBAAkB,CAACsC,OAAO,CAACY,QAAQ,CAACvR,KAAK,CAAC,EAAEuR,QAAQ,CAACtV,QAAQ,CAAC,CAC5F;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
index 5b4e1e5..fb1263a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),r=require("@ethersproject/abi"),i=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),y=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),o=require("@uniswap/sdk-core");function d(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}function m(){return(m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function c(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return T(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var f,b,v,C,A=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(f=exports.Market||(exports.Market={})).Foundation="foundation",f.LooksRareV2="looksrareV2",f.NFT20="nft20",f.NFTX="nftx",f.Seaport="seaport",f.Sudoswap="Sudoswap",f.Cryptopunks="cryptopunks",f.X2Y2="x2y2",f.Element="element",(b=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",b.ERC1155="ERC1155",b.Cryptopunk="Cryptopunk",(C=exports.CommandType||(exports.CommandType={}))[C.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",C[C.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",C[C.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",C[C.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",C[C.SWEEP=4]="SWEEP",C[C.TRANSFER=5]="TRANSFER",C[C.PAY_PORTION=6]="PAY_PORTION",C[C.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",C[C.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",C[C.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",C[C.WRAP_ETH=11]="WRAP_ETH",C[C.UNWRAP_WETH=12]="UNWRAP_WETH",C[C.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",C[C.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",C[C.SEAPORT_V1_5=16]="SEAPORT_V1_5",C[C.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",C[C.NFTX=18]="NFTX",C[C.CRYPTOPUNKS=19]="CRYPTOPUNKS",C[C.OWNER_CHECK_721=21]="OWNER_CHECK_721",C[C.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",C[C.SWEEP_ERC721=23]="SWEEP_ERC721",C[C.X2Y2_721=24]="X2Y2_721",C[C.SUDOSWAP=25]="SUDOSWAP",C[C.NFT20=26]="NFT20",C[C.X2Y2_1155=27]="X2Y2_1155",C[C.FOUNDATION=28]="FOUNDATION",C[C.SWEEP_ERC1155=29]="SWEEP_ERC1155",C[C.ELEMENT_MARKET=30]="ELEMENT_MARKET",C[C.SEAPORT_V1_4=32]="SEAPORT_V1_4",C[C.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",C[C.APPROVE_ERC20=34]="APPROVE_ERC20";var x,R=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),I=((v={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],v[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],v[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],v[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],v[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],v[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],v[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],v[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],v[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],v[exports.CommandType.WRAP_ETH]=["address","uint256"],v[exports.CommandType.UNWRAP_WETH]=["address","uint256"],v[exports.CommandType.SWEEP]=["address","address","uint256"],v[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],v[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],v[exports.CommandType.TRANSFER]=["address","address","uint256"],v[exports.CommandType.PAY_PORTION]=["address","address","uint256"],v[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],v[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],v[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],v[exports.CommandType.APPROVE_ERC20]=["address","uint256"],v[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],v[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],v[exports.CommandType.NFTX]=["uint256","bytes"],v[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],v[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],v[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],v[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],v[exports.CommandType.SUDOSWAP]=["uint256","bytes"],v[exports.CommandType.NFT20]=["uint256","bytes"],v[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],v[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],v),S=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(I[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!R.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),M=((x={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",creationBlock:17143817},x[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",creationBlock:8940568},x[11155111]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",creationBlock:3543575},x[137]={router:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",creationBlock:52210153},x[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",creationBlock:35176052},x[10]={router:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",weth:"0x4200000000000000000000000000000000000006",creationBlock:114702266},x[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:8887728},x[42161]={router:"0x5E325eDA8064b456f4781070C0738d849c824258",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",creationBlock:169472836},x[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",creationBlock:18815277},x[42220]={router:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",weth:"0x0000000000000000000000000000000000000000",creationBlock:21407637},x[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:17566658},x[56]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",creationBlock:35160263},x[43114]={router:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",creationBlock:40237257},x[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",creationBlock:6915289},x[8453]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:9107268},x[81457]={router:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",weth:"0x4300000000000000000000000000000000000004",creationBlock:1116444},x[7777777]={router:"0x2986d9721A49838ab4297b695858aF7F17f38014",weth:"0x4200000000000000000000000000000000000006",creationBlock:11832155},x[324]={router:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",weth:"0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",creationBlock:12640979},x),_=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==M[e].weth)throw new Error("Chain "+e+" does not have WETH");return M[e].weth},k=i.BigNumber.from(2).pow(255),w="0x0000000000000000000000000000000000000000",P="0x0000000000000000000000000000000000000000",E="0x0000000000000000000000000000000000000001",h="0x0000000000000000000000000000000000000002",O=new o.Percent(50,100),F=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!this.inputRequiresWrap&&!this.options.useRouterBalance}var t,n;return e.prototype.encode=function(e,t){var n;this.inputRequiresWrap&&e.addCommand(exports.CommandType.WRAP_ETH,[h,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),this.options.recipient=null!=(n=this.options.recipient)?n:E;for(var a,r,p=this.trade.outputAmount.currency.isNative,s=this.trade.tradeType===o.TradeType.EXACT_INPUT&&this.trade.routes.length>2||p||!!(a=this.options).fee||!!a.flatFee,d=c(this.trade.swaps);!(r=d()).done;){var m=r.value;switch(m.route.protocol){case u.Protocol.V2:N(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.V3:g(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.MIXED:B(e,m,this.trade.tradeType,this.options,this.payerIsUser,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var l=i.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(s){if(this.options.fee){var T=y.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,T]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(l.mul(T).div(1e4)))}if(this.options.flatFee){var f=this.options.flatFee.amount;if(l.lt(f))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,f]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(l=l.sub(f))}p?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,l]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,l])}this.inputRequiresWrap&&(this.trade.tradeType===o.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(O))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[w,this.options.recipient,0])},t=e,(n=[{key:"inputRequiresWrap",get:function(){return this.trade.inputAmount.currency.isNative}}])&&function(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,d(a.key),a)}}(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function N(e,t,n,a,r,i){var p=t.route,y=new s.Trade(p,n==o.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[i?h:a.recipient,y.maximumAmountIn(a.slippageTolerance).quotient.toString(),y.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[i?h:a.recipient,y.minimumAmountOut(a.slippageTolerance).quotient.toString(),y.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),r])}function g(e,t,n,a,r,i){var p=t.route,s=y.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=y.encodeRouteToPath(p,s.tradeType===o.TradeType.EXACT_OUTPUT);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[i?h:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,r]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[i?h:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,r])}function B(e,t,n,a,r,i){var p=t.route,o=t.inputAmount,d=t.outputAmount,m=i?h:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof y.Pool)return g(e,t,n,a,r,i);if(p.pools[0]instanceof s.Pair)return N(e,t,n,a,r,i);throw new Error("Invalid route type")}for(var l,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:o,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,o).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),v=function(e){return e===b.length-1},C=p.input.wrapped,A=0;A<b.length;A++){var x=b[A];l=u.getOutputOfPools(x,C);var R=new u.MixedRouteSDK([].concat(x),x[0].token0.equals(C)?x[0].token0:x[0].token1,l),I=new u.MixedRoute(R);if(C=l,function(e){return e.pools.every((function(e){return e instanceof y.Pool}))}(I)){var S=u.encodeMixedRouteToPath(I);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[v(A)?m:b[A+1][0].liquidityToken.address,0==A?c:k,v(A)?f:0,S,r&&0===A])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[v(A)?m:h,0===A?c:k,v(A)?f:0,I.path.map((function(e){return e.address})),r&&0===A])}}function V(e,t){var n=t.signature,a=i.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=i.ethers.utils.joinSignature(i.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function L(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,D(t.approval.protocol)]),t.permit2Permit&&V(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:h,t.permit2TransferFrom.amount])}function D(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var U=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var r,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new S,u=i.BigNumber.from(0),o=i.BigNumber.from(0),d=new Set,m=c(t);!(r=m()).done;){var l=r.value;if(l.tradeType==exports.RouterTradeType.NFTTrade){var T=l;T.encode(y,{allowRevert:s});var f=T.getTotalPrice();T.market==exports.Market.Seaport?T.getInputTokens().forEach((function(e){d.add(e)})):d.add(w),u.lt(f)?(o=o.add(f.sub(u)),u=i.BigNumber.from(0)):u=u.sub(f)}else if(l.tradeType==exports.RouterTradeType.UniswapTrade){var b=l,v=b.trade.inputAmount.currency.isNative,C=b.trade.outputAmount.currency.isNative,A=b.options;v&&A.inputTokenPermit&&n(!1),A.inputTokenPermit&&V(y,A.inputTokenPermit),v&&(o=o.add(i.BigNumber.from(b.trade.maximumAmountIn(A.slippageTolerance).quotient.toString()))),C&&A.recipient==h&&(u=u.add(i.BigNumber.from(b.trade.minimumAmountOut(A.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else{if(l.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var x=l;l.encode(y,{allowRevert:!1}),u=u.add(x.amount)}}return d.forEach((function(e){y.addCommand(exports.CommandType.SWEEP,[e,E,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,r=new S,p=i.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=c(t);!(a=y()).done;){var u=a.value;u.encode(r,{allowRevert:s}),p=p.add(u.getTotalPrice())}return r.addCommand(exports.CommandType.SWEEP,[w,E,0]),e.encodePlan(r,p,n)},e.swapERC20CallParameters=function(t,a){var r=new S,p=new F(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&V(r,a.inputTokenPermit);var y=i.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(r,{allowRevert:!1}),e.encodePlan(r,y,{deadline:a.deadlineOrPreviousBlockhash?i.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var r=t.commands,i=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[r,i,a.deadline]:[r,i]),value:n.toHexString()}},e}();U.INTERFACE=new r.Interface(a.abi);var H=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=c(this.orders);!(n=a()).done;){var r=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[r.tokenId,r.recipient,r.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);H.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var W=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],X=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[i.tokenAddress,i.tokenId,i.price,i.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(A);X.INTERFACE=new r.Interface(W);var K=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],q=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){var a,r=this.refactorAPIData(this.orders),i=r.takerBids,p=r.makerOrders,s=r.makerSignatures,y=r.totalValue,u=r.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[i[0],p[0],s[0],u[0],P]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[i,p,s,u,P,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)for(var r,i=e.value,p=i.apiOrder.collection,s=i.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=c(i.apiOrder.itemIds);!(r=y()).done;)n.push({tokenAddress:p,tokenId:r.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],r=i.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(m({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),r=r.add(i.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:r,merkleTrees:p}},t}(A);q.INTERFACE=new r.Interface(K),q.ERC721_ORDER=0;var z=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],Y=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[i.tokenAddress,i.tokenIds,i.tokenAmounts,i.recipient,i.fee,i.isV3]);e.addCommand(exports.CommandType.NFT20,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);Y.INTERFACE=new r.Interface(z);var j=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],G=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[i.vaultId,i.tokenIds.length,i.tokenIds,i.swapCalldata,i.recipient]);e.addCommand(exports.CommandType.NFTX,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(A);G.INTERFACE=new r.Interface(j);var Q=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Z=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){for(var i,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=c(p.items);!(i=o()).done;){var d=this.getAdvancedOrderParams(i.value);s.push(d.advancedOrder)}var m;if(m=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var l,T=c(p.inputTokenProcessing);!(l=T()).done;){var f=l.value;L(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,w).toString(),m],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.offer);!(i=p()).done;){var s=i.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.consideration);!(i=p()).done;){var s=i.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=w);for(var n,a=i.BigNumber.from(0),r=c(e.items);!(n=r()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=w);for(var t,n=i.BigNumber.from(0),a=c(this.orders);!(t=a()).done;)for(var r,p=c(t.value.items);!(r=p()).done;)n=n.add(this.calculateValue(r.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var r=e[a],i=function(){var e=r.parameters.consideration[p];-1===n.findIndex((function(t){return t===e.recipient}))&&n.push(e.recipient);var i=n.findIndex((function(t){return t===e.recipient}));t[i]?t[i].push({orderIndex:a,itemIndex:p}):t.push([{orderIndex:a,itemIndex:p}])};for(var p in r.parameters.consideration)i()}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:i.BigNumber.from("1"),denominator:i.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),i.BigNumber.from(0))},t}(A);Z.INTERFACE=new r.Interface(Q),Z.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var $=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],J=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),i.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)for(var i,p=a.value,s=c(p.swapInfo.nftIds);!(i=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:i.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)t=t.add(a.value.maxCost);return t},t}(A);J.INTERFACE=new r.Interface($);var ee=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],te=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}l(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+i.signedInput.slice(2);i.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert):i.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[i.price,p,i.recipient,i.tokenAddress,i.tokenId,i.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(A);te.INTERFACE=new r.Interface(ee);var ne,ae=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=_(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){L(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[h,this.amount])},e}();(ne=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",ne.V3Pool="v3-pool";var re=function(e){return e.toLowerCase()===w.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},ie=function(){function e(){}return e.fromClassicQuote=function(t){var n=t.route,a=t.tokenIn,r=t.tokenOut;if(!n)throw new Error("Expected route to be present");if(!n.length)throw new Error("Expected there to be at least one route");if(n.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var i=n[0],p=i[0].tokenIn,d=i[i.length-1].tokenOut;if(!p||!d)throw new Error("Expected both tokenIn and tokenOut to be present");if(p.chainId!==d.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var m=e.toCurrency(re(a),p),l=e.toCurrency(re(r),d),T=n.map((function(t){var n=t[0].amountIn,a=t[t.length-1].amountOut;if(!n||!a)throw new Error("Expected both raw amountIn and raw amountOut to be present");var r=o.CurrencyAmount.fromRawAmount(m,n),i=o.CurrencyAmount.fromRawAmount(l,a),p=e.isVersionedRoute(exports.PoolType.V2Pool,t),d=e.isVersionedRoute(exports.PoolType.V3Pool,t);return{routev3:d?new y.Route(t.map(e.toPool),m,l):null,routev2:p?new s.Route(t.map(e.toPair),m,l):null,mixedRoute:d||p?null:new u.MixedRouteSDK(t.map(e.toPoolOrPair),m,l),inputAmount:r,outputAmount:i}}));return new u.Trade({v2Routes:T.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:T.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:T.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?o.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,n=e.buyFeeBps,a=e.sellFeeBps;return new o.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,n?i.BigNumber.from(n):void 0,a?i.BigNumber.from(a):void 0)},e.toPool=function(t){var n=t.fee,a=t.sqrtRatioX96,r=t.liquidity,i=t.tickCurrent,p=t.tokenOut;return new y.Pool(e.toToken(t.tokenIn),e.toToken(p),parseInt(n),a,r,parseInt(i))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();ie.toPoolOrPair=function(e){return e.type===exports.PoolType.V3Pool?ie.toPool(e):ie.toPair(e)},ie.toPair=function(e){var t=e.reserve0,n=e.reserve1;return new s.Pair(o.CurrencyAmount.fromRawAmount(ie.toToken(t.token),t.quotient),o.CurrencyAmount.fromRawAmount(ie.toToken(n.token),n.quotient))},exports.CryptopunkTrade=H,exports.FoundationTrade=X,exports.LooksRareV2Trade=q,exports.NFT20Trade=Y,exports.NFTTrade=A,exports.NFTXTrade=G,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=h,exports.RoutePlanner=S,exports.RouterTradeAdapter=ie,exports.SeaportTrade=Z,exports.SudoswapTrade=J,exports.SwapRouter=U,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);return M[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in M))throw new Error("Universal Router not deployed on chain "+e);return M[e].creationBlock},exports.UniswapTrade=F,exports.UnwrapWETH=ae,exports.WETH_ADDRESS=_,exports.X2Y2Trade=te,exports.isNativeCurrency=re;
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),r=require("@ethersproject/abi"),i=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),o=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),y=require("@uniswap/sdk-core");function d(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var a=n.call(e,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}function l(){return(l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function m(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function c(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return T(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var f,b,C,v,x=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(f=exports.Market||(exports.Market={})).Foundation="foundation",f.LooksRareV2="looksrareV2",f.NFT20="nft20",f.NFTX="nftx",f.Seaport="seaport",f.Sudoswap="Sudoswap",f.Cryptopunks="cryptopunks",f.X2Y2="x2y2",f.Element="element",(b=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",b.ERC1155="ERC1155",b.Cryptopunk="Cryptopunk",(v=exports.CommandType||(exports.CommandType={}))[v.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",v[v.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",v[v.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",v[v.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",v[v.SWEEP=4]="SWEEP",v[v.TRANSFER=5]="TRANSFER",v[v.PAY_PORTION=6]="PAY_PORTION",v[v.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",v[v.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",v[v.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",v[v.WRAP_ETH=11]="WRAP_ETH",v[v.UNWRAP_WETH=12]="UNWRAP_WETH",v[v.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",v[v.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",v[v.SEAPORT_V1_5=16]="SEAPORT_V1_5",v[v.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",v[v.NFTX=18]="NFTX",v[v.CRYPTOPUNKS=19]="CRYPTOPUNKS",v[v.OWNER_CHECK_721=21]="OWNER_CHECK_721",v[v.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",v[v.SWEEP_ERC721=23]="SWEEP_ERC721",v[v.X2Y2_721=24]="X2Y2_721",v[v.SUDOSWAP=25]="SUDOSWAP",v[v.NFT20=26]="NFT20",v[v.X2Y2_1155=27]="X2Y2_1155",v[v.FOUNDATION=28]="FOUNDATION",v[v.SWEEP_ERC1155=29]="SWEEP_ERC1155",v[v.ELEMENT_MARKET=30]="ELEMENT_MARKET",v[v.SEAPORT_V1_4=32]="SEAPORT_V1_4",v[v.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",v[v.APPROVE_ERC20=34]="APPROVE_ERC20";var A,R,_,I,k,S,E,F,w,M,P,h,O,g,N,B,V,U,D,L,H,W,X,K,q,z,Y,j,G,Q,Z,$,J=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),ee=((C={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],C[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],C[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],C[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],C[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],C[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],C[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],C[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],C[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],C[exports.CommandType.WRAP_ETH]=["address","uint256"],C[exports.CommandType.UNWRAP_WETH]=["address","uint256"],C[exports.CommandType.SWEEP]=["address","address","uint256"],C[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],C[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],C[exports.CommandType.TRANSFER]=["address","address","uint256"],C[exports.CommandType.PAY_PORTION]=["address","address","uint256"],C[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],C[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],C[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],C[exports.CommandType.APPROVE_ERC20]=["address","uint256"],C[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],C[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],C[exports.CommandType.NFTX]=["uint256","bytes"],C[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],C[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],C[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],C[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],C[exports.CommandType.SUDOSWAP]=["uint256","bytes"],C[exports.CommandType.NFT20]=["uint256","bytes"],C[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],C[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],C),te=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(ee[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!J.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}();($=exports.UniversalRouterVersion||(exports.UniversalRouterVersion={})).V1_2="1.2",$.V2_0="2.0";var ne=((Z={})[1]={weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",routerConfigs:(A={},A[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17143817},A[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17143817},A)},Z[5]={weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",routerConfigs:(R={},R[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},R[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},R)},Z[11155111]={weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",routerConfigs:(_={},_[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:3543575},_[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:3543575},_)},Z[137]={weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",routerConfigs:(I={},I[exports.UniversalRouterVersion.V1_2]={address:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",creationBlock:52210153},I[exports.UniversalRouterVersion.V2_0]={address:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",creationBlock:52210153},I)},Z[80001]={weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",routerConfigs:(k={},k[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},k[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},k)},Z[10]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(S={},S[exports.UniversalRouterVersion.V1_2]={address:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",creationBlock:114702266},S[exports.UniversalRouterVersion.V2_0]={address:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",creationBlock:114702266},S)},Z[420]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(E={},E[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},E[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},E)},Z[42161]={weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",routerConfigs:(F={},F[exports.UniversalRouterVersion.V1_2]={address:"0x5E325eDA8064b456f4781070C0738d849c824258",creationBlock:169472836},F[exports.UniversalRouterVersion.V2_0]={address:"0x5E325eDA8064b456f4781070C0738d849c824258",creationBlock:169472836},F)},Z[421613]={weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",routerConfigs:(w={},w[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},w[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},w)},Z[42220]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(M={},M[exports.UniversalRouterVersion.V1_2]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:66790},M[exports.UniversalRouterVersion.V2_0]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:66790},M)},Z[44787]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(P={},P[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},P[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},P)},Z[56]={weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",routerConfigs:(h={},h[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:35160263},h[exports.UniversalRouterVersion.V2_0]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:35160263},h)},Z[43114]={weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",routerConfigs:(O={},O[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:40237257},O[exports.UniversalRouterVersion.V2_0]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:40237257},O)},Z[84531]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(g={},g[exports.UniversalRouterVersion.V1_2]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},g[exports.UniversalRouterVersion.V2_0]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},g)},Z[8453]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(N={},N[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:9107268},N[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:9107268},N)},Z[81457]={weth:"0x4300000000000000000000000000000000000004",routerConfigs:(B={},B[exports.UniversalRouterVersion.V1_2]={address:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",creationBlock:1116444},B[exports.UniversalRouterVersion.V2_0]={address:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",creationBlock:1116444},B)},Z[7777777]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(V={},V[exports.UniversalRouterVersion.V1_2]={address:"0x2986d9721A49838ab4297b695858aF7F17f38014",creationBlock:11832155},V[exports.UniversalRouterVersion.V2_0]={address:"0x2986d9721A49838ab4297b695858aF7F17f38014",creationBlock:11832155},V)},Z[324]={weth:"0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",routerConfigs:(U={},U[exports.UniversalRouterVersion.V1_2]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},U[exports.UniversalRouterVersion.V2_0]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},U)},Z[11124]={weth:"0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d",routerConfigs:(D={},D[exports.UniversalRouterVersion.V1_2]={address:"0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5",creationBlock:2616204},D[exports.UniversalRouterVersion.V2_0]={address:"0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5",creationBlock:2616204},D)},Z[543210]={weth:"0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c",routerConfigs:(L={},L[exports.UniversalRouterVersion.V1_2]={address:"0xF93Ce7C55073aE244f4a5C810924D790C65F742E",creationBlock:12528},L[exports.UniversalRouterVersion.V2_0]={address:"0xF93Ce7C55073aE244f4a5C810924D790C65F742E",creationBlock:12528},L)},Z[60808]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(H={},H[exports.UniversalRouterVersion.V1_2]={address:"0x346239972d1fa486FC4a521031BC81bFB7D6e8a4",creationBlock:5369968},H[exports.UniversalRouterVersion.V2_0]={address:"0x346239972d1fa486FC4a521031BC81bFB7D6e8a4",creationBlock:5369968},H)},Z[7560]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(W={},W[exports.UniversalRouterVersion.V1_2]={address:"0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0",creationBlock:9622699},W[exports.UniversalRouterVersion.V2_0]={address:"0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0",creationBlock:9622699},W)},Z[360]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(X={},X[exports.UniversalRouterVersion.V1_2]={address:"0x663EfF39dd168A7Eb4016a237b16A8aB86901856",creationBlock:6177818},X[exports.UniversalRouterVersion.V2_0]={address:"0x663EfF39dd168A7Eb4016a237b16A8aB86901856",creationBlock:6177818},X)},Z[57073]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(K={},K[exports.UniversalRouterVersion.V1_2]={address:"0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF",creationBlock:525058},K[exports.UniversalRouterVersion.V2_0]={address:"0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF",creationBlock:525058},K)},Z[17069]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(q={},q[exports.UniversalRouterVersion.V1_2]={address:"0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78",creationBlock:598982},q[exports.UniversalRouterVersion.V2_0]={address:"0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78",creationBlock:598982},q)},Z[690]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(z={},z[exports.UniversalRouterVersion.V1_2]={address:"0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46",creationBlock:929085},z[exports.UniversalRouterVersion.V2_0]={address:"0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46",creationBlock:929085},z)},Z[2741]={weth:"0x3439153EB7AF838Ad19d56E1571FBD09333C2809",routerConfigs:(Y={},Y[exports.UniversalRouterVersion.V1_2]={address:"0xE1b076ea612Db28a0d768660e4D81346c02ED75e",creationBlock:66790},Y[exports.UniversalRouterVersion.V2_0]={address:"0xE1b076ea612Db28a0d768660e4D81346c02ED75e",creationBlock:66790},Y)},Z[69e3]={weth:"0x164906a76f1A2Ea933366c446AE0Ec6a37062c42",routerConfigs:(j={},j[exports.UniversalRouterVersion.V1_2]={address:"0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad",creationBlock:48474},j[exports.UniversalRouterVersion.V2_0]={address:"0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad",creationBlock:48474},j)},Z[6900]={weth:"0x8f3e2785985aa4005c63f97f7cc89ce91a948267",routerConfigs:(G={},G[exports.UniversalRouterVersion.V1_2]={address:"0x62E309AdCF935D62f824081148798eF8A7466b66",creationBlock:1654941},G[exports.UniversalRouterVersion.V2_0]={address:"0x62E309AdCF935D62f824081148798eF8A7466b66",creationBlock:1654941},G)},Z[34443]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(Q={},Q[exports.UniversalRouterVersion.V1_2]={address:"0x1B94dcAA28E947CEEA8140C77277F0b1d4899713",creationBlock:19224890},Q[exports.UniversalRouterVersion.V2_0]={address:"0x1B94dcAA28E947CEEA8140C77277F0b1d4899713",creationBlock:19224890},Q)},Z),ae=function(e){if(!(e in ne))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==ne[e].weth)throw new Error("Chain "+e+" does not have WETH");return ne[e].weth},re=i.BigNumber.from(2).pow(255),ie="0x0000000000000000000000000000000000000000",pe="0x0000000000000000000000000000000000000000",se="0x0000000000000000000000000000000000000001",oe="0x0000000000000000000000000000000000000002",ue=new y.Percent(50,100),ye=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!this.inputRequiresWrap&&!this.options.useRouterBalance}var t,n;return e.prototype.encode=function(e,t){var n;this.inputRequiresWrap&&e.addCommand(exports.CommandType.WRAP_ETH,[oe,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),this.options.recipient=null!=(n=this.options.recipient)?n:se;for(var a,r,p=this.trade.outputAmount.currency.isNative,s=this.trade.tradeType===y.TradeType.EXACT_INPUT&&this.trade.routes.length>2||p||!!(a=this.options).fee||!!a.flatFee,d=c(this.trade.swaps);!(r=d()).done;){var l=r.value;switch(l.route.protocol){case u.Protocol.V2:de(e,l,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.V3:le(e,l,this.trade.tradeType,this.options,this.payerIsUser,s);break;case u.Protocol.MIXED:me(e,l,this.trade.tradeType,this.options,this.payerIsUser,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var m=i.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(s){if(this.options.fee){var T=o.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,T]),this.trade.tradeType===y.TradeType.EXACT_OUTPUT&&(m=m.sub(m.mul(T).div(1e4)))}if(this.options.flatFee){var f=this.options.flatFee.amount;if(m.lt(f))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,f]),this.trade.tradeType===y.TradeType.EXACT_OUTPUT&&(m=m.sub(f))}p?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,m]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,m])}this.inputRequiresWrap&&(this.trade.tradeType===y.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(ue))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[ie,this.options.recipient,0])},t=e,(n=[{key:"inputRequiresWrap",get:function(){return this.trade.inputAmount.currency.isNative}}])&&function(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,d(a.key),a)}}(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function de(e,t,n,a,r,i){var p=t.route,o=new s.Trade(p,n==y.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==y.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[i?oe:a.recipient,o.maximumAmountIn(a.slippageTolerance).quotient.toString(),o.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.wrapped.address})),r]):n==y.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[i?oe:a.recipient,o.minimumAmountOut(a.slippageTolerance).quotient.toString(),o.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.wrapped.address})),r])}function le(e,t,n,a,r,i){var p=t.route,s=o.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=o.encodeRouteToPath(p,s.tradeType===y.TradeType.EXACT_OUTPUT);n==y.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[i?oe:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,r]):n==y.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[i?oe:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,r])}function me(e,t,n,a,r,i){var p=t.route,y=t.inputAmount,d=t.outputAmount,l=i?oe:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof o.Pool)return le(e,t,n,a,r,i);if(p.pools[0]instanceof s.Pair)return de(e,t,n,a,r,i);throw new Error("Invalid route type")}for(var m,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:y,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,y).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),C=function(e){return e===b.length-1},v=p.input.wrapped,x=0;x<b.length;x++){var A=b[x];m=u.getOutputOfPools(A,v);var R=new u.MixedRouteSDK([].concat(A),A[0].token0.equals(v)?A[0].token0:A[0].token1,m),_=new u.MixedRoute(R);if(v=m.wrapped,function(e){return e.pools.every((function(e){return e instanceof o.Pool}))}(_)){var I=u.encodeMixedRouteToPath(_);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[C(x)?l:b[x+1][0].liquidityToken.address,0==x?c:re,C(x)?f:0,I,r&&0===x])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[C(x)?l:oe,0===x?c:re,C(x)?f:0,_.path.map((function(e){return e.wrapped.address})),r&&0===x])}}function Te(e,t){var n=t.signature,a=i.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=i.ethers.utils.joinSignature(i.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function ce(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,fe(t.approval.protocol)]),t.permit2Permit&&Te(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:oe,t.permit2TransferFrom.amount])}function fe(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var be=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var r,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,o=new te,u=i.BigNumber.from(0),y=i.BigNumber.from(0),d=new Set,l=c(t);!(r=l()).done;){var m=r.value;if(m.tradeType==exports.RouterTradeType.NFTTrade){var T=m;T.encode(o,{allowRevert:s});var f=T.getTotalPrice();T.market==exports.Market.Seaport?T.getInputTokens().forEach((function(e){d.add(e)})):d.add(ie),u.lt(f)?(y=y.add(f.sub(u)),u=i.BigNumber.from(0)):u=u.sub(f)}else if(m.tradeType==exports.RouterTradeType.UniswapTrade){var b=m,C=b.trade.inputAmount.currency.isNative,v=b.trade.outputAmount.currency.isNative,x=b.options;C&&x.inputTokenPermit&&n(!1),x.inputTokenPermit&&Te(o,x.inputTokenPermit),C&&(y=y.add(i.BigNumber.from(b.trade.maximumAmountIn(x.slippageTolerance).quotient.toString()))),v&&x.recipient==oe&&(u=u.add(i.BigNumber.from(b.trade.minimumAmountOut(x.slippageTolerance).quotient.toString()))),b.encode(o,{allowRevert:!1})}else{if(m.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var A=m;m.encode(o,{allowRevert:!1}),u=u.add(A.amount)}}return d.forEach((function(e){o.addCommand(exports.CommandType.SWEEP,[e,se,0])})),e.encodePlan(o,y,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,r=new te,p=i.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,o=c(t);!(a=o()).done;){var u=a.value;u.encode(r,{allowRevert:s}),p=p.add(u.getTotalPrice())}return r.addCommand(exports.CommandType.SWEEP,[ie,se,0]),e.encodePlan(r,p,n)},e.swapERC20CallParameters=function(t,a){var r=new te,p=new ye(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&Te(r,a.inputTokenPermit);var o=i.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(r,{allowRevert:!1}),e.encodePlan(r,o,{deadline:a.deadlineOrPreviousBlockhash?i.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var r=t.commands,i=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[r,i,a.deadline]:[r,i]),value:n.toHexString()}},e}();be.INTERFACE=new r.Interface(a.abi);var Ce=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=c(this.orders);!(n=a()).done;){var r=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[r.tokenId,r.recipient,r.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(x);Ce.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var ve=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],xe=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[i.tokenAddress,i.tokenId,i.price,i.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(x);xe.INTERFACE=new r.Interface(ve);var Ae=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],Re=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){var a,r=this.refactorAPIData(this.orders),i=r.takerBids,p=r.makerOrders,s=r.makerSignatures,o=r.totalValue,u=r.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[i[0],p[0],s[0],u[0],pe]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[i,p,s,u,pe,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[o,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)for(var r,i=e.value,p=i.apiOrder.collection,s=i.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,o=c(i.apiOrder.itemIds);!(r=o()).done;)n.push({tokenAddress:p,tokenId:r.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],r=i.BigNumber.from(0),p=[];return e.forEach((function(e){var s,o;n.push(l({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),r=r.add(i.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(o=e.apiOrder.merkleProof)?o:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:r,merkleTrees:p}},t}(x);Re.INTERFACE=new r.Interface(Ae),Re.ERC721_ORDER=0;var _e=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],Ie=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[i.tokenAddress,i.tokenIds,i.tokenAmounts,i.recipient,i.fee,i.isV3]);e.addCommand(exports.CommandType.NFT20,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(x);Ie.INTERFACE=new r.Interface(_e);var ke=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],Se=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[i.vaultId,i.tokenIds.length,i.tokenIds,i.swapCalldata,i.recipient]);e.addCommand(exports.CommandType.NFTX,[i.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=e.value,i=c(r.tokenIds);!(a=i()).done;)t.push({tokenAddress:r.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(x);Se.INTERFACE=new r.Interface(ke);var Ee=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Fe=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){for(var i,p=a.value,s=[],o=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),y=c(p.items);!(i=y()).done;){var d=this.getAdvancedOrderParams(i.value);s.push(d.advancedOrder)}var l;if(l=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],o,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var m,T=c(p.inputTokenProcessing);!(m=T()).done;){var f=m.value;ce(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,ie).toString(),l],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.offer);!(i=p()).done;){var s=i.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.items);!(a=r()).done;)for(var i,p=c(a.value.parameters.consideration);!(i=p()).done;){var s=i.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=ie);for(var n,a=i.BigNumber.from(0),r=c(e.items);!(n=r()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=ie);for(var t,n=i.BigNumber.from(0),a=c(this.orders);!(t=a()).done;)for(var r,p=c(t.value.items);!(r=p()).done;)n=n.add(this.calculateValue(r.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var r=e[a],i=function(){var e=r.parameters.consideration[p];-1===n.findIndex((function(t){return t===e.recipient}))&&n.push(e.recipient);var i=n.findIndex((function(t){return t===e.recipient}));t[i]?t[i].push({orderIndex:a,itemIndex:p}):t.push([{orderIndex:a,itemIndex:p}])};for(var p in r.parameters.consideration)i()}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:i.BigNumber.from("1"),denominator:i.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),i.BigNumber.from(0))},t}(x);Fe.INTERFACE=new r.Interface(Ee),Fe.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var we=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],Me=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),o=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),i.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[o,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)for(var i,p=a.value,s=c(p.swapInfo.nftIds);!(i=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:i.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)for(var a,r=c(e.value.swaps);!(a=r()).done;)t=t.add(a.value.maxCost);return t},t}(x);Me.INTERFACE=new r.Interface(we);var Pe=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],he=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,r=c(this.orders);!(a=r()).done;){var i=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+i.signedInput.slice(2);i.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[i.price,p,i.recipient,i.tokenAddress,i.tokenId],n.allowRevert):i.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[i.price,p,i.recipient,i.tokenAddress,i.tokenId,i.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=i.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(x);he.INTERFACE=new r.Interface(Pe);var Oe,ge=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=ae(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){ce(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[oe,this.amount])},e}();(Oe=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",Oe.V3Pool="v3-pool";var Ne=function(e){return e.toLowerCase()===ie.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},Be=function(){function e(){}return e.fromClassicQuote=function(t){var n=t.route,a=t.tokenIn,r=t.tokenOut;if(!n)throw new Error("Expected route to be present");if(!n.length)throw new Error("Expected there to be at least one route");if(n.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var i=n[0],p=i[0].tokenIn,d=i[i.length-1].tokenOut;if(!p||!d)throw new Error("Expected both tokenIn and tokenOut to be present");if(p.chainId!==d.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var l=e.toCurrency(Ne(a),p),m=e.toCurrency(Ne(r),d),T=n.map((function(t){var n=t[0].amountIn,a=t[t.length-1].amountOut;if(!n||!a)throw new Error("Expected both raw amountIn and raw amountOut to be present");var r=y.CurrencyAmount.fromRawAmount(l,n),i=y.CurrencyAmount.fromRawAmount(m,a),p=e.isVersionedRoute(exports.PoolType.V2Pool,t),d=e.isVersionedRoute(exports.PoolType.V3Pool,t);return{routev3:d?new o.Route(t.map(e.toPool),l,m):null,routev2:p?new s.Route(t.map(e.toPair),l,m):null,mixedRoute:d||p?null:new u.MixedRouteSDK(t.map(e.toPoolOrPair),l,m),inputAmount:r,outputAmount:i}}));return new u.Trade({v2Routes:T.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:T.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v4Routes:[],mixedRoutes:T.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?y.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,n=e.buyFeeBps,a=e.sellFeeBps;return new y.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,n?i.BigNumber.from(n):void 0,a?i.BigNumber.from(a):void 0)},e.toPool=function(t){var n=t.fee,a=t.sqrtRatioX96,r=t.liquidity,i=t.tickCurrent,p=t.tokenOut;return new o.Pool(e.toToken(t.tokenIn),e.toToken(p),parseInt(n),a,r,parseInt(i))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();Be.toPoolOrPair=function(e){return e.type===exports.PoolType.V3Pool?Be.toPool(e):Be.toPair(e)},Be.toPair=function(e){var t=e.reserve0,n=e.reserve1;return new s.Pair(y.CurrencyAmount.fromRawAmount(Be.toToken(t.token),t.quotient),y.CurrencyAmount.fromRawAmount(Be.toToken(n.token),n.quotient))},exports.CryptopunkTrade=Ce,exports.FoundationTrade=xe,exports.LooksRareV2Trade=Re,exports.NFT20Trade=Ie,exports.NFTTrade=x,exports.NFTXTrade=Se,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=oe,exports.RoutePlanner=te,exports.RouterTradeAdapter=Be,exports.SeaportTrade=Fe,exports.SudoswapTrade=Me,exports.SwapRouter=be,exports.UNIVERSAL_ROUTER_ADDRESS=function(e,t){if(!(t in ne))throw new Error("Universal Router not deployed on chain "+t);return ne[t].routerConfigs[e].address},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e,t){if(!(t in ne))throw new Error("Universal Router not deployed on chain "+t);return ne[t].routerConfigs[e].creationBlock},exports.UniswapTrade=ye,exports.UnwrapWETH=ge,exports.WETH_ADDRESS=ae,exports.X2Y2Trade=he,exports.isNativeCurrency=Ne;
 //# sourceMappingURL=universal-router-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
index 89bb756..8d8eeb4 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","_this$options$recipie","swapOptions","_step","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","_step2","totalPrice","_iterator2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","call","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","_step3","total","_iterator3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_step4","_iterator4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_step5","_iterator5","_step6","_iterator6","offer","identifierOrCriteria","_step7","inputTokens","_iterator7","_step8","_iterator8","_step9","_iterator9","consideration","_step10","totalOrderPrice","_iterator10","calculateValue","_step11","_iterator11","_step12","_iterator12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/utils/routerTradeAdapter.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n    },\n  },\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n    },\n  },\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  [11124]: {\n    weth: '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n    },\n  },\n  [543210]: {\n    weth: '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n    },\n  },\n  [60808]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n    },\n  },\n  [7560]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n    },\n  },\n  [360]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n    },\n  },\n  [57073]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n    },\n  },\n  [17069]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n    },\n  },\n  [690]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n    },\n  },\n  [2741]: {\n    weth: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n    },\n  },\n  [69000]: {\n    weth: '0x164906a76f1A2Ea933366c446AE0Ec6a37062c42',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n    },\n  },\n  [6900]: {\n    weth: '0x8f3e2785985aa4005c63f97f7cc89ce91a948267',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n    },\n  },\n  [34443]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | V3Pool | V4Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken.wrapped\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof V3Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      // TODO: ROUTE-219 - Support v4 trade in universal-router sdk\n      v4Routes: [],\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","UniversalRouterVersion","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","_routerConfigs24","_routerConfigs25","_routerConfigs26","_routerConfigs27","_routerConfigs28","_routerConfigs29","_routerConfigs30","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","recipient","_this$options$recipie","swapOptions","_step","outputIsNative","outputAmount","currency","isNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","safeMode","key","get","inputAmount","_ref","V2Trade","path","map","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","V3Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","pool","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","_step2","totalPrice","_iterator2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","call","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","_step3","total","_iterator3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_step4","_iterator4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_step5","_iterator5","_step6","_iterator6","offer","identifierOrCriteria","_step7","inputTokens","_iterator7","_step8","_iterator8","_step9","_iterator9","consideration","_step10","totalOrderPrice","_iterator10","calculateValue","_step11","_iterator11","_step12","_iterator12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","PoolType","wethAddress","permit2Data","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","symbol","buyFeeBps","sellFeeBps","Token","parseInt","decimals","sqrtRatioX96","liquidity","tickCurrent","Pool","reserve0","reserve1","version"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
index 90f6af2..504e657 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
@@ -213,88 +213,292 @@ function createCommand(type, parameters) {
   };
 }
 
-var _CHAIN_CONFIGS;
+var _routerConfigs, _routerConfigs2, _routerConfigs3, _routerConfigs4, _routerConfigs5, _routerConfigs6, _routerConfigs7, _routerConfigs8, _routerConfigs9, _routerConfigs10, _routerConfigs11, _routerConfigs12, _routerConfigs13, _routerConfigs14, _routerConfigs15, _routerConfigs16, _routerConfigs17, _routerConfigs18, _routerConfigs19, _routerConfigs20, _routerConfigs21, _routerConfigs22, _routerConfigs23, _routerConfigs24, _routerConfigs25, _routerConfigs26, _routerConfigs27, _routerConfigs28, _routerConfigs29, _routerConfigs30, _CHAIN_CONFIGS;
+var UniversalRouterVersion;
+(function (UniversalRouterVersion) {
+  UniversalRouterVersion["V1_2"] = "1.2";
+  UniversalRouterVersion["V2_0"] = "2.0";
+})(UniversalRouterVersion || (UniversalRouterVersion = {}));
 var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
+// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4
 var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
-  creationBlock: 17143817
+  routerConfigs: (_routerConfigs = {}, _routerConfigs[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17143817
+  }, _routerConfigs[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17143817
+  }, _routerConfigs)
 }, _CHAIN_CONFIGS[5] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
-  creationBlock: 8940568
+  routerConfigs: (_routerConfigs2 = {}, _routerConfigs2[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8940568
+  }, _routerConfigs2[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8940568
+  }, _routerConfigs2)
 }, _CHAIN_CONFIGS[11155111] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
-  creationBlock: 3543575
+  routerConfigs: (_routerConfigs3 = {}, _routerConfigs3[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 3543575
+  }, _routerConfigs3[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 3543575
+  }, _routerConfigs3)
 }, _CHAIN_CONFIGS[137] = {
-  router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 52210153
+  routerConfigs: (_routerConfigs4 = {}, _routerConfigs4[UniversalRouterVersion.V1_2] = {
+    address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
+    creationBlock: 52210153
+  }, _routerConfigs4[UniversalRouterVersion.V2_0] = {
+    address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',
+    creationBlock: 52210153
+  }, _routerConfigs4)
 }, _CHAIN_CONFIGS[80001] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
-  creationBlock: 35176052
+  routerConfigs: (_routerConfigs5 = {}, _routerConfigs5[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 35176052
+  }, _routerConfigs5[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 35176052
+  }, _routerConfigs5)
 }, _CHAIN_CONFIGS[10] = {
-  router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 114702266
+  routerConfigs: (_routerConfigs6 = {}, _routerConfigs6[UniversalRouterVersion.V1_2] = {
+    address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
+    creationBlock: 114702266
+  }, _routerConfigs6[UniversalRouterVersion.V2_0] = {
+    address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',
+    creationBlock: 114702266
+  }, _routerConfigs6)
 }, _CHAIN_CONFIGS[420] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 8887728
+  routerConfigs: (_routerConfigs7 = {}, _routerConfigs7[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8887728
+  }, _routerConfigs7[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 8887728
+  }, _routerConfigs7)
 }, _CHAIN_CONFIGS[42161] = {
-  router: '0x5E325eDA8064b456f4781070C0738d849c824258',
   weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 169472836
+  routerConfigs: (_routerConfigs8 = {}, _routerConfigs8[UniversalRouterVersion.V1_2] = {
+    address: '0x5E325eDA8064b456f4781070C0738d849c824258',
+    creationBlock: 169472836
+  }, _routerConfigs8[UniversalRouterVersion.V2_0] = {
+    address: '0x5E325eDA8064b456f4781070C0738d849c824258',
+    creationBlock: 169472836
+  }, _routerConfigs8)
 }, _CHAIN_CONFIGS[421613] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
-  creationBlock: 18815277
+  routerConfigs: (_routerConfigs9 = {}, _routerConfigs9[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 18815277
+  }, _routerConfigs9[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 18815277
+  }, _routerConfigs9)
 }, _CHAIN_CONFIGS[42220] = {
-  router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
   weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 21407637
+  routerConfigs: (_routerConfigs10 = {}, _routerConfigs10[UniversalRouterVersion.V1_2] = {
+    address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
+    creationBlock: 66790
+  }, _routerConfigs10[UniversalRouterVersion.V2_0] = {
+    address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',
+    creationBlock: 66790
+  }, _routerConfigs10)
 }, _CHAIN_CONFIGS[44787] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 17566658
+  routerConfigs: (_routerConfigs11 = {}, _routerConfigs11[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17566658
+  }, _routerConfigs11[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 17566658
+  }, _routerConfigs11)
 }, _CHAIN_CONFIGS[56] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
   weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 35160263
+  routerConfigs: (_routerConfigs12 = {}, _routerConfigs12[UniversalRouterVersion.V1_2] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 35160263
+  }, _routerConfigs12[UniversalRouterVersion.V2_0] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 35160263
+  }, _routerConfigs12)
 }, _CHAIN_CONFIGS[43114] = {
-  router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
   weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 40237257
+  routerConfigs: (_routerConfigs13 = {}, _routerConfigs13[UniversalRouterVersion.V1_2] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 40237257
+  }, _routerConfigs13[UniversalRouterVersion.V2_0] = {
+    address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',
+    creationBlock: 40237257
+  }, _routerConfigs13)
 }, _CHAIN_CONFIGS[84531] = {
-  router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 6915289
+  routerConfigs: (_routerConfigs14 = {}, _routerConfigs14[UniversalRouterVersion.V1_2] = {
+    address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
+    creationBlock: 6915289
+  }, _routerConfigs14[UniversalRouterVersion.V2_0] = {
+    address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
+    creationBlock: 6915289
+  }, _routerConfigs14)
 }, _CHAIN_CONFIGS[8453] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 9107268
+  routerConfigs: (_routerConfigs15 = {}, _routerConfigs15[UniversalRouterVersion.V1_2] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 9107268
+  }, _routerConfigs15[UniversalRouterVersion.V2_0] = {
+    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+    creationBlock: 9107268
+  }, _routerConfigs15)
 }, _CHAIN_CONFIGS[81457] = {
-  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
   weth: '0x4300000000000000000000000000000000000004',
-  creationBlock: 1116444
+  routerConfigs: (_routerConfigs16 = {}, _routerConfigs16[UniversalRouterVersion.V1_2] = {
+    address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
+    creationBlock: 1116444
+  }, _routerConfigs16[UniversalRouterVersion.V2_0] = {
+    address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
+    creationBlock: 1116444
+  }, _routerConfigs16)
 }, _CHAIN_CONFIGS[7777777] = {
-  router: '0x2986d9721A49838ab4297b695858aF7F17f38014',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 11832155
+  routerConfigs: (_routerConfigs17 = {}, _routerConfigs17[UniversalRouterVersion.V1_2] = {
+    address: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+    creationBlock: 11832155
+  }, _routerConfigs17[UniversalRouterVersion.V2_0] = {
+    address: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+    creationBlock: 11832155
+  }, _routerConfigs17)
 }, _CHAIN_CONFIGS[324] = {
-  router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
   weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',
-  creationBlock: 12640979
+  routerConfigs: (_routerConfigs18 = {}, _routerConfigs18[UniversalRouterVersion.V1_2] = {
+    address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
+    creationBlock: 12640979
+  }, _routerConfigs18[UniversalRouterVersion.V2_0] = {
+    address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',
+    creationBlock: 12640979
+  }, _routerConfigs18)
+}, _CHAIN_CONFIGS[11124] = {
+  weth: '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d',
+  routerConfigs: (_routerConfigs19 = {}, _routerConfigs19[UniversalRouterVersion.V1_2] = {
+    address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',
+    creationBlock: 2616204
+  }, _routerConfigs19[UniversalRouterVersion.V2_0] = {
+    address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',
+    creationBlock: 2616204
+  }, _routerConfigs19)
+}, _CHAIN_CONFIGS[543210] = {
+  weth: '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c',
+  routerConfigs: (_routerConfigs20 = {}, _routerConfigs20[UniversalRouterVersion.V1_2] = {
+    address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',
+    creationBlock: 12528
+  }, _routerConfigs20[UniversalRouterVersion.V2_0] = {
+    address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',
+    creationBlock: 12528
+  }, _routerConfigs20)
+}, _CHAIN_CONFIGS[60808] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs21 = {}, _routerConfigs21[UniversalRouterVersion.V1_2] = {
+    address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',
+    creationBlock: 5369968
+  }, _routerConfigs21[UniversalRouterVersion.V2_0] = {
+    address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',
+    creationBlock: 5369968
+  }, _routerConfigs21)
+}, _CHAIN_CONFIGS[7560] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs22 = {}, _routerConfigs22[UniversalRouterVersion.V1_2] = {
+    address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',
+    creationBlock: 9622699
+  }, _routerConfigs22[UniversalRouterVersion.V2_0] = {
+    address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',
+    creationBlock: 9622699
+  }, _routerConfigs22)
+}, _CHAIN_CONFIGS[360] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs23 = {}, _routerConfigs23[UniversalRouterVersion.V1_2] = {
+    address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',
+    creationBlock: 6177818
+  }, _routerConfigs23[UniversalRouterVersion.V2_0] = {
+    address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',
+    creationBlock: 6177818
+  }, _routerConfigs23)
+}, _CHAIN_CONFIGS[57073] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs24 = {}, _routerConfigs24[UniversalRouterVersion.V1_2] = {
+    address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',
+    creationBlock: 525058
+  }, _routerConfigs24[UniversalRouterVersion.V2_0] = {
+    address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',
+    creationBlock: 525058
+  }, _routerConfigs24)
+}, _CHAIN_CONFIGS[17069] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs25 = {}, _routerConfigs25[UniversalRouterVersion.V1_2] = {
+    address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',
+    creationBlock: 598982
+  }, _routerConfigs25[UniversalRouterVersion.V2_0] = {
+    address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',
+    creationBlock: 598982
+  }, _routerConfigs25)
+}, _CHAIN_CONFIGS[690] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs26 = {}, _routerConfigs26[UniversalRouterVersion.V1_2] = {
+    address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',
+    creationBlock: 929085
+  }, _routerConfigs26[UniversalRouterVersion.V2_0] = {
+    address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',
+    creationBlock: 929085
+  }, _routerConfigs26)
+}, _CHAIN_CONFIGS[2741] = {
+  weth: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',
+  routerConfigs: (_routerConfigs27 = {}, _routerConfigs27[UniversalRouterVersion.V1_2] = {
+    address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',
+    creationBlock: 66790
+  }, _routerConfigs27[UniversalRouterVersion.V2_0] = {
+    address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',
+    creationBlock: 66790
+  }, _routerConfigs27)
+}, _CHAIN_CONFIGS[69000] = {
+  weth: '0x164906a76f1A2Ea933366c446AE0Ec6a37062c42',
+  routerConfigs: (_routerConfigs28 = {}, _routerConfigs28[UniversalRouterVersion.V1_2] = {
+    address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',
+    creationBlock: 48474
+  }, _routerConfigs28[UniversalRouterVersion.V2_0] = {
+    address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',
+    creationBlock: 48474
+  }, _routerConfigs28)
+}, _CHAIN_CONFIGS[6900] = {
+  weth: '0x8f3e2785985aa4005c63f97f7cc89ce91a948267',
+  routerConfigs: (_routerConfigs29 = {}, _routerConfigs29[UniversalRouterVersion.V1_2] = {
+    address: '0x62E309AdCF935D62f824081148798eF8A7466b66',
+    creationBlock: 1654941
+  }, _routerConfigs29[UniversalRouterVersion.V2_0] = {
+    address: '0x62E309AdCF935D62f824081148798eF8A7466b66',
+    creationBlock: 1654941
+  }, _routerConfigs29)
+}, _CHAIN_CONFIGS[34443] = {
+  weth: '0x4200000000000000000000000000000000000006',
+  routerConfigs: (_routerConfigs30 = {}, _routerConfigs30[UniversalRouterVersion.V1_2] = {
+    address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',
+    creationBlock: 19224890
+  }, _routerConfigs30[UniversalRouterVersion.V2_0] = {
+    address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',
+    creationBlock: 19224890
+  }, _routerConfigs30)
 }, _CHAIN_CONFIGS);
-var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
+var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(version, chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].router;
+  return CHAIN_CONFIGS[chainId].routerConfigs[version].address;
 };
-var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(chainId) {
+var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(version, chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  return CHAIN_CONFIGS[chainId].creationBlock;
+  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock;
 };
 var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
@@ -417,12 +621,12 @@ function addV2Swap(planner, _ref, tradeType, options, payerIsUser, routerMustCus
   if (tradeType == TradeType.EXACT_INPUT) {
     planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [
     // if native, we have to unwrap so keep in the router for now
-    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
+    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (token) {
+      return token.wrapped.address;
     }), payerIsUser]);
   } else if (tradeType == TradeType.EXACT_OUTPUT) {
-    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
-      return pool.address;
+    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (token) {
+      return token.wrapped.address;
     }), payerIsUser]);
   }
 }
@@ -483,7 +687,7 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
     var newRouteOriginal = new MixedRouteSDK([].concat(section), section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1, outputToken);
     var newRoute = new MixedRoute(newRouteOriginal);
     /// Previous output is now input
-    inputToken = outputToken;
+    inputToken = outputToken.wrapped;
     var mixedRouteIsAllV3 = function mixedRouteIsAllV3(route) {
       return route.pools.every(function (pool) {
         return pool instanceof Pool;
@@ -496,8 +700,8 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
       // note: because of the partitioning function we can be sure that the next section is v2
       isLastSectionInRoute(i) ? tradeRecipient : sections[i + 1][0].liquidityToken.address, i == 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, path, payerIsUser && i === 0]);
     } else {
-      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
-        return pool.address;
+      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (token) {
+        return token.wrapped.address;
       }), payerIsUser && i === 0]);
     }
   }
@@ -10658,6 +10862,8 @@ var RouterTradeAdapter = /*#__PURE__*/function () {
           outputAmount: route.outputAmount
         };
       }),
+      // TODO: ROUTE-219 - Support v4 trade in universal-router sdk
+      v4Routes: [],
       mixedRoutes: typedRoutes.filter(function (route) {
         return route.mixedRoute;
       }).map(function (route) {
@@ -10710,5 +10916,5 @@ RouterTradeAdapter.toPair = function (_ref2) {
   return new Pair(CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient), CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient));
 };
 
-export { CommandType, CryptopunkTrade, FoundationTrade, LooksRareV2Trade, Market, NFT20Trade, NFTTrade, NFTXTrade, PERMIT2_ADDRESS, PoolType, ROUTER_AS_RECIPIENT, RoutePlanner, RouterTradeAdapter, RouterTradeType, SeaportTrade, SudoswapTrade, SwapRouter, TokenType, UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, UniswapTrade, UnwrapWETH, WETH_ADDRESS, X2Y2Trade, isNativeCurrency };
+export { CommandType, CryptopunkTrade, FoundationTrade, LooksRareV2Trade, Market, NFT20Trade, NFTTrade, NFTXTrade, PERMIT2_ADDRESS, PoolType, ROUTER_AS_RECIPIENT, RoutePlanner, RouterTradeAdapter, RouterTradeType, SeaportTrade, SudoswapTrade, SwapRouter, TokenType, UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, UniswapTrade, UniversalRouterVersion, UnwrapWETH, WETH_ADDRESS, X2Y2Trade, isNativeCurrency };
 //# sourceMappingURL=universal-router-sdk.esm.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
index 9c537ba..2416dcf 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 52210153,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 114702266,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x5E325eDA8064b456f4781070C0738d849c824258',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 169472836,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21407637,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 35160263,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 40237257,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 9107268,\n  },\n  [81457]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x4300000000000000000000000000000000000004',\n    creationBlock: 1116444,\n  },\n  [7777777]: {\n    router: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 11832155,\n  },\n  [324]: {\n    router: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    creationBlock: 12640979,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","env","NODE_ENV","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","V3Pool","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","reserve0","reserve1"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 66790,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n    },\n  },\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n    },\n  },\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  [11124]: {\n    weth: '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xCdFB71b46bF3f44FC909B5B4Eaf4967EC3C5B4e5',\n        creationBlock: 2616204,\n      },\n    },\n  },\n  [543210]: {\n    weth: '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xF93Ce7C55073aE244f4a5C810924D790C65F742E',\n        creationBlock: 12528,\n      },\n    },\n  },\n  [60808]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x346239972d1fa486FC4a521031BC81bFB7D6e8a4',\n        creationBlock: 5369968,\n      },\n    },\n  },\n  [7560]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xbc1287f5af439c7d6dcfa0bdcbb30d81725ffda0',\n        creationBlock: 9622699,\n      },\n    },\n  },\n  [360]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x663EfF39dd168A7Eb4016a237b16A8aB86901856',\n        creationBlock: 6177818,\n      },\n    },\n  },\n  [57073]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x9C5577aEF7c2a5C80aA62bA5420170F6b4a302FF',\n        creationBlock: 525058,\n      },\n    },\n  },\n  [17069]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x02b36A5aCa3e51d2E73926E3D3bB59C979B60C78',\n        creationBlock: 598982,\n      },\n    },\n  },\n  [690]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf92496316432e9EaCcAb99dDCcFd7e40A4d8fe46',\n        creationBlock: 929085,\n      },\n    },\n  },\n  [2741]: {\n    weth: '0x3439153EB7AF838Ad19d56E1571FBD09333C2809',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xE1b076ea612Db28a0d768660e4D81346c02ED75e',\n        creationBlock: 66790,\n      },\n    },\n  },\n  [69000]: {\n    weth: '0x164906a76f1A2Ea933366c446AE0Ec6a37062c42',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x74Fecc60e5eE05421f69B4B91263B1CB291D47Ad',\n        creationBlock: 48474,\n      },\n    },\n  },\n  [6900]: {\n    weth: '0x8f3e2785985aa4005c63f97f7cc89ce91a948267',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x62E309AdCF935D62f824081148798eF8A7466b66',\n        creationBlock: 1654941,\n      },\n    },\n  },\n  [34443]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1B94dcAA28E947CEEA8140C77277F0b1d4899713',\n        creationBlock: 19224890,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | V3Pool | V4Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap) this.payerIsUser = false\n    else if (this.options.useRouterBalance) this.payerIsUser = false\n    else this.payerIsUser = true\n  }\n\n  get inputRequiresWrap(): boolean {\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (this.inputRequiresWrap && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken.wrapped\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof V3Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n\n      return {\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toPool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      // TODO: ROUTE-219 - Support v4 trade in universal-router sdk\n      v4Routes: [],\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V3PoolInRoute | V2PoolInRoute): Pool | Pair => {\n    return pool.type === PoolType.V3Pool ? RouterTradeAdapter.toPool(pool) : RouterTradeAdapter.toPair(pool)\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toPool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): Pool {\n    return new Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","process","env","NODE_ENV","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","_routerConfigs24","_routerConfigs25","_routerConfigs26","_routerConfigs27","_routerConfigs28","_routerConfigs29","_routerConfigs30","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","payerIsUser","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","currency","isNative","routerMustCustody","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","safeMode","_createClass","key","get","inputAmount","_ref","V2Trade","path","map","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","pool","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputIsNative","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","_extends","taker","additionalParameters","root","_order$apiOrder$merkl","merkleRoot","proof","_order$apiOrder$merkl2","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","_iterator4","_step4","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","inputTokens","_iterator7","_step7","_iterator8","_step8","_iterator9","consideration","_step9","totalOrderPrice","_iterator10","_step10","calculateValue","_iterator11","_step11","_iterator12","_step12","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","some","r","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","subRoute","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","routev3","V3Route","toPool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","symbol","buyFeeBps","sellFeeBps","Token","parseInt","sqrtRatioX96","liquidity","tickCurrent","Pool","reserve0","reserve1"],"mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
index 27e31c8..6ba3fdc 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
@@ -1,6 +1,23 @@
 import { BigNumber } from 'ethers';
-export declare const UNIVERSAL_ROUTER_ADDRESS: (chainId: number) => string;
-export declare const UNIVERSAL_ROUTER_CREATION_BLOCK: (chainId: number) => number;
+export declare enum UniversalRouterVersion {
+    V1_2 = "1.2",
+    V2_0 = "2.0"
+}
+export declare type RouterConfig = {
+    address: string;
+    creationBlock: number;
+};
+declare type ChainConfig = {
+    weth: string;
+    routerConfigs: {
+        [key in UniversalRouterVersion]: RouterConfig;
+    };
+};
+export declare const CHAIN_CONFIGS: {
+    [key: number]: ChainConfig;
+};
+export declare const UNIVERSAL_ROUTER_ADDRESS: (version: UniversalRouterVersion, chainId: number) => string;
+export declare const UNIVERSAL_ROUTER_CREATION_BLOCK: (version: UniversalRouterVersion, chainId: number) => number;
 export declare const WETH_ADDRESS: (chainId: number) => string;
 export declare const PERMIT2_ADDRESS = "0x000000000022D473030F116dDEE9F6B43aC78BA3";
 export declare const CONTRACT_BALANCE: BigNumber;
@@ -13,3 +30,4 @@ export declare const SENDER_AS_RECIPIENT = "0x0000000000000000000000000000000000
 export declare const ROUTER_AS_RECIPIENT = "0x0000000000000000000000000000000000000002";
 export declare const OPENSEA_CONDUIT_SPENDER_ID = 0;
 export declare const SUDOSWAP_SPENDER_ID = 1;
+export {};
